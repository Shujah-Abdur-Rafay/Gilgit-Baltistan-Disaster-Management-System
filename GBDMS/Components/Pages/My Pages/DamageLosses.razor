@page "/losses"
@inject IJSRuntime JS
@inject IDamageRepository DamageRepository
@using GBDMS.Data

<div class="container-fluid">
    <div class="row mb-4 align-items-center">
        <div class="col">
            <h2 class="text-center text-success">Damage and Losses Assessment</h2>
        </div>
    </div>

    <div class="row">
        <!-- Filters and Summary Panel -->
        <div class="col-md-4 mb-4">
            <div class="card border-success">
                <div class="card-header bg-success text-white">
                    <h5 class="mb-0">Filter and Summary</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label class="form-label">Disaster Type</label>
                        <select class="form-select border-success" @bind="selectedDisasterType">
                            <option value="">All Disaster Types</option>
                            <option value="Earthquake">Earthquake</option>
                            <option value="Flood">Flood</option>
                            <option value="Landslide">Landslide</option>
                            <option value="Avalanche">Avalanche</option>
                            <option value="GLOF">Glacial Lake Outburst Flood</option>
                            <option value="Other">Other</option>
                        </select>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">District</label>
                        <select class="form-select border-success" @bind="selectedDistrict">
                            <option value="">All Districts</option>
                            <option value="Gilgit">Gilgit</option>
                            <option value="Skardu">Skardu</option>
                            <option value="Hunza">Hunza</option>
                            <option value="Astore">Astore</option>
                            <option value="Ghanche">Ghanche</option>
                            <option value="Ghizer">Ghizer</option>
                            <option value="Nagar">Nagar</option>
                            <option value="Shigar">Shigar</option>
                        </select>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Date Range</label>
                        <div class="input-group mb-2">
                            <span class="input-group-text bg-success text-white">From</span>
                            <input type="date" class="form-control border-success" @bind="startDate">
                        </div>
                        <div class="input-group">
                            <span class="input-group-text bg-success text-white">To</span>
                            <input type="date" class="form-control border-success" @bind="endDate">
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Damage Category</label>
                        <select class="form-select border-success" @bind="selectedCategory">
                            <option value="">All Categories</option>
                            <option value="Infrastructure">Infrastructure</option>
                            <option value="Housing">Housing</option>
                            <option value="Agriculture">Agriculture</option>
                            <option value="Healthcare">Healthcare</option>
                            <option value="Education">Education</option>
                            <option value="Commercial">Commercial</option>
                            <option value="Other">Other</option>
                        </select>
                    </div>

                    <button class="btn btn-success w-100" @onclick="ApplyFilters">
                        <i class="bi bi-funnel-fill"></i> Apply Filters
                    </button>
                    
                    <hr />
                    
                    <div class="summary-stats">
                        <h6 class="text-muted mb-3">Summary Statistics</h6>
                        
                        <div class="stat-box total-damage">
                            <div class="stat-label">Total Financial Loss</div>
                            <div class="stat-value">PKR @totalFinancialLoss.ToString("N0")</div>
                        </div>
                        
                        <div class="row g-2 mt-2">
                            <div class="col-6">
                                <div class="stat-box">
                                    <div class="stat-label">Total Incidents</div>
                                    <div class="stat-value">@filteredDamageList.Count</div>
                                </div>
                            </div>
                            <div class="col-6">
                                <div class="stat-box">
                                    <div class="stat-label">Verified Records</div>
                                    <div class="stat-value">@filteredDamageList.Count(d => d.IsVerified)</div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="mt-3">
                            <h6 class="text-muted">Damage Distribution</h6>
                            <div class="progress" style="height: 24px;">
                                @foreach (var category in categoryDistribution)
                                {
                                    <div class="progress-bar @GetCategoryColor(category.Key)" 
                                         role="progressbar" 
                                         style="width: @(category.Value)%" 
                                         title="@category.Key: @(category.Value)%">
                                        @if (category.Value >= 10)
                                        {
                                            @(category.Value)@("%")
                                        }
                                    </div>
                                }
                            </div>
                            <div class="category-legend mt-2">
                                @foreach (var category in categoryDistribution)
                                {
                                    <div class="category-item">
                                        <span class="category-color @GetCategoryColor(category.Key)"></span>
                                        <span class="category-name">@category.Key</span>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Damage Records and Form -->
        <div class="col-md-8">
            <!-- Entry Form -->
            <div class="card border-success mb-4">
                <div class="card-header bg-success text-white d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Record New Damage/Loss</h5>
                    <button class="btn btn-sm btn-light" @onclick="ToggleForm">
                        @(showForm ? "Close" : "Add New")
                    </button>
                </div>
                @if (showForm)
                {
                    <div class="card-body">
                        <form>
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">Title/Description</label>
                                        <input type="text" class="form-control border-success" @bind="newDamage.Title" required>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">Disaster Type</label>
                                        <select class="form-select border-success" @bind="newDamage.DisasterType" required>
                                            <option value="">Select Type</option>
                                            <option value="Earthquake">Earthquake</option>
                                            <option value="Flood">Flood</option>
                                            <option value="Landslide">Landslide</option>
                                            <option value="Avalanche">Avalanche</option>
                                            <option value="GLOF">Glacial Lake Outburst Flood</option>
                                            <option value="Other">Other</option>
                                        </select>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">District</label>
                                        <select class="form-select border-success" @bind="newDamage.District" required>
                                            <option value="">Select District</option>
                                            <option value="Gilgit">Gilgit</option>
                                            <option value="Skardu">Skardu</option>
                                            <option value="Hunza">Hunza</option>
                                            <option value="Astore">Astore</option>
                                            <option value="Ghanche">Ghanche</option>
                                            <option value="Ghizer">Ghizer</option>
                                            <option value="Nagar">Nagar</option>
                                            <option value="Shigar">Shigar</option>
                                        </select>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">Specific Location</label>
                                        <input type="text" class="form-control border-success" @bind="newDamage.Location">
                                    </div>
                                </div>
                            </div>
                            
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">Date of Incident</label>
                                        <input type="date" class="form-control border-success" @bind="newDamage.Date" required>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">Damage Category</label>
                                        <select class="form-select border-success" @bind="newDamage.Category" required>
                                            <option value="">Select Category</option>
                                            <option value="Infrastructure">Infrastructure</option>
                                            <option value="Housing">Housing</option>
                                            <option value="Agriculture">Agriculture</option>
                                            <option value="Healthcare">Healthcare</option>
                                            <option value="Education">Education</option>
                                            <option value="Commercial">Commercial</option>
                                            <option value="Other">Other</option>
                                        </select>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">Financial Loss (PKR)</label>
                                        <input type="number" class="form-control border-success" @bind="newDamage.FinancialLoss" min="0">
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">Severity</label>
                                        <select class="form-select border-success" @bind="newDamage.Severity">
                                            <option value="Low">Low</option>
                                            <option value="Medium">Medium</option>
                                            <option value="High">High</option>
                                            <option value="Severe">Severe</option>
                                        </select>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="mb-3">
                                <label class="form-label">Detailed Description</label>
                                <textarea class="form-control border-success" rows="3" @bind="newDamage.Description"></textarea>
                            </div>
                            
                            <div class="form-check mb-3">
                                <input class="form-check-input" type="checkbox" id="verifiedCheck" @bind="newDamage.IsVerified">
                                <label class="form-check-label" for="verifiedCheck">
                                    Verified by Authority
                                </label>
                            </div>
                            
                            <div class="d-flex justify-content-end">
                                <button type="button" class="btn btn-outline-success me-2" @onclick="ResetForm">Clear</button>
                                <button type="button" class="btn btn-success" @onclick="AddDamageRecord">Save Record</button>
                            </div>
                        </form>
                    </div>
                }
            </div>
            
            <!-- Damage Records Table -->
            <div class="card border-success">
                <div class="card-header bg-success text-white">
                    <h5 class="mb-0">Damage and Loss Records</h5>
                </div>
                <div class="card-body p-0">
                    <div class="table-responsive">
                        <table class="table table-hover table-striped mb-0">
                            <thead class="table-success">
                                <tr>
                                    <th>Date</th>
                                    <th>Title</th>
                                    <th>Category</th>
                                    <th>District</th>
                                    <th>Financial Loss</th>
                                    <th>Status</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (loading)
                                {
                                    <tr>
                                        <td colspan="7" class="text-center py-3">
                                            <div class="spinner-border text-success" role="status">
                                                <span class="visually-hidden">Loading...</span>
                                            </div>
                                        </td>
                                    </tr>
                                }
                                else if (filteredDamageList.Count == 0)
                                {
                                    <tr>
                                        <td colspan="7" class="text-center py-3">No damage records found.</td>
                                    </tr>
                                }
                                else
                                {
                                    @foreach (var damage in filteredDamageList)
                                    {
                                        <tr>
                                            <td>@damage.Date.ToString("yyyy-MM-dd")</td>
                                            <td>@damage.Title</td>
                                            <td>
                                                <span class="badge rounded-pill bg-success text-white">
                                                    @damage.Category
                                                </span>
                                            </td>
                                            <td>@damage.District</td>
                                            <td>PKR @damage.FinancialLoss.ToString("N0")</td>
                                            <td>
                                                @if (damage.IsVerified)
                                                {
                                                    <span class="badge bg-success">Verified</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-warning text-dark">Pending</span>
                                                }
                                            </td>
                                            <td>
                                                <button class="btn btn-sm btn-outline-success me-1" @onclick="() => ViewDetails(damage)">
                                                    <i class="bi bi-eye"></i>
                                                </button>
                                                <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteRecord(damage)">
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@if (selectedDamage != null)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content border-success">
                <div class="modal-header bg-success text-white">
                    <h5 class="modal-title">Damage Details</h5>
                    <button type="button" class="btn-close" @onclick="CloseDetailsModal"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <p><strong>Title:</strong> @selectedDamage.Title</p>
                            <p><strong>Category:</strong> @selectedDamage.Category</p>
                            <p><strong>Disaster Type:</strong> @selectedDamage.DisasterType</p>
                            <p><strong>Date:</strong> @selectedDamage.Date.ToString("yyyy-MM-dd")</p>
                        </div>
                        <div class="col-md-6">
                            <p><strong>District:</strong> @selectedDamage.District</p>
                            <p><strong>Location:</strong> @selectedDamage.Location</p>
                            <p><strong>Financial Loss:</strong> PKR @selectedDamage.FinancialLoss.ToString("N0")</p>
                            <p><strong>Severity:</strong> @selectedDamage.Severity</p>
                        </div>
                    </div>
                    
                    <div class="mt-3">
                        <h6>Detailed Description</h6>
                        <p>@selectedDamage.Description</p>
                    </div>
                    
                    <div class="form-check mt-3">
                        <input class="form-check-input" type="checkbox" id="modalVerifiedCheck" 
                               @bind="selectedDamage.IsVerified"
                               @onclick="UpdateVerificationStatus">
                        <label class="form-check-label" for="modalVerifiedCheck">
                            <strong>Verified by Authority</strong>
                        </label>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-success" @onclick="CloseDetailsModal">Close</button>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    </div>
}

@code {
    // Filter properties
    private string selectedDisasterType = "";
    private string selectedDistrict = "";
    private string selectedCategory = "";
    private DateTime startDate = DateTime.Now.AddMonths(-1);
    private DateTime endDate = DateTime.Now;
    
    // Form properties
    private DamageRecord newDamage = new();
    private bool showForm = false;
    
    // Data properties
    private List<DamageRecord> damageList = new();
    private List<DamageRecord> filteredDamageList = new();
    private double totalFinancialLoss = 0;
    private Dictionary<string, double> categoryDistribution = new();
    private bool loading = true;
    
    // Modal properties
    private DamageRecord? selectedDamage;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadDamageRecords();
    }
    
    private async Task LoadDamageRecords()
    {
        loading = true;
        
        try
        {
            damageList = await DamageRepository.GetAllAsync();
            
            // If no records found, add sample data (only for first run)
            if (damageList.Count == 0)
            {
                await InitializeSampleData();
                damageList = await DamageRepository.GetAllAsync();
            }
            
            await ApplyFilters();
        }
        catch (Exception)
        {
            // Handle error
        }
        finally
        {
            loading = false;
        }
    }
    
    private async Task InitializeSampleData()
    {
        var sampleData = new List<DamageRecord>
        {
            new DamageRecord
            {
                Title = "Bridge Collapse in Gilgit City",
                DisasterType = "Flood",
                District = "Gilgit",
                Location = "Central Gilgit, Janbaaz Bridge",
                Date = DateTime.Now.AddDays(-25),
                Category = "Infrastructure",
                FinancialLoss = 15000000,
                Severity = "High",
                Description = "The main bridge connecting the eastern and western parts of Gilgit city collapsed due to heavy flooding.",
                IsVerified = true
            },
            new DamageRecord
            {
                Title = "Agricultural Lands Damaged in Ghizer",
                DisasterType = "Flood",
                District = "Ghizer",
                Location = "Phandar Valley",
                Date = DateTime.Now.AddDays(-18),
                Category = "Agriculture",
                FinancialLoss = 4500000,
                Severity = "Medium",
                Description = "Approximately 120 acres of fertile agricultural land was damaged by flash floods.",
                IsVerified = true
            },
            new DamageRecord
            {
                Title = "Primary School Building Damaged",
                DisasterType = "Earthquake",
                District = "Skardu",
                Location = "Shighar Area",
                Date = DateTime.Now.AddDays(-12),
                Category = "Education",
                FinancialLoss = 7800000,
                Severity = "Medium",
                Description = "The main building of Government Primary School was significantly damaged with cracks in walls and ceiling.",
                IsVerified = false
            }
        };
        
        foreach (var item in sampleData)
        {
            await DamageRepository.CreateAsync(item);
        }
    }
    
    private async Task ApplyFilters()
    {
        loading = true;
        
        try
        {
            if (!string.IsNullOrEmpty(selectedDisasterType))
            {
                filteredDamageList = await DamageRepository.GetByDisasterTypeAsync(selectedDisasterType);
            }
            else if (!string.IsNullOrEmpty(selectedDistrict))
            {
                filteredDamageList = await DamageRepository.GetByDistrictAsync(selectedDistrict);
            }
            else if (!string.IsNullOrEmpty(selectedCategory))
            {
                filteredDamageList = await DamageRepository.GetByCategoryAsync(selectedCategory);
            }
            else
            {
                filteredDamageList = await DamageRepository.GetByDateRangeAsync(startDate, endDate);
            }
            
            // Calculate total financial loss
            totalFinancialLoss = filteredDamageList.Sum(d => d.FinancialLoss);
            
            // Calculate category distribution
            CalculateCategoryDistribution();
        }
        finally
        {
            loading = false;
        }
    }
    
    private void CalculateCategoryDistribution()
    {
        categoryDistribution = new Dictionary<string, double>();
        
        if (filteredDamageList.Count == 0)
            return;
            
        var groupedCategories = filteredDamageList
            .GroupBy(d => d.Category)
            .Select(g => new { Category = g.Key, Count = g.Count() });
            
        foreach (var item in groupedCategories)
        {
            double percentage = Math.Round((double)item.Count / filteredDamageList.Count * 100, 1);
            categoryDistribution.Add(item.Category, percentage);
        }
    }
    
    private void ToggleForm()
    {
        showForm = !showForm;
        if (showForm)
        {
            ResetForm();
        }
    }
    
    private void ResetForm()
    {
        newDamage = new DamageRecord
        {
            Date = DateTime.Now,
            Severity = "Medium",
            IsVerified = false
        };
    }
    
    private async Task AddDamageRecord()
    {
        if (string.IsNullOrWhiteSpace(newDamage.Title) || 
            string.IsNullOrWhiteSpace(newDamage.DisasterType) ||
            string.IsNullOrWhiteSpace(newDamage.District) ||
            string.IsNullOrWhiteSpace(newDamage.Category))
        {
            // Display validation error
            return;
        }
        
        try
        {
            // Add to database
            await DamageRepository.CreateAsync(newDamage);
            
            // Refresh the list
            await LoadDamageRecords();
            
            // Reset the form
            ResetForm();
            
            // Hide the form
            showForm = false;
        }
        catch (Exception)
        {
            // Handle error
        }
    }
    
    private void ViewDetails(DamageRecord damage)
    {
        selectedDamage = damage;
    }
    
    private void CloseDetailsModal()
    {
        selectedDamage = null;
    }
    
    private async Task DeleteRecord(DamageRecord damage)
    {
        try
        {
            await DamageRepository.DeleteAsync(damage.Id);
            await LoadDamageRecords();
        }
        catch (Exception)
        {
            // Handle error
        }
    }
    
    private async Task UpdateVerificationStatus()
    {
        try
        {
            await DamageRepository.UpdateAsync(selectedDamage);
        }
        catch (Exception)
        {
            // Handle error
        }
    }
    
    private string GetCategoryBadgeClass(string category)
    {
        return category switch
        {
            "Infrastructure" => "bg-primary",
            "Housing" => "bg-success",
            "Agriculture" => "bg-success text-dark",
            "Healthcare" => "bg-danger",
            "Education" => "bg-warning text-dark",
            "Commercial" => "bg-info text-dark",
            _ => "bg-secondary"
        };
    }
    
    private string GetCategoryColor(string category)
    {
        return category switch
        {
            "Infrastructure" => "bg-primary",
            "Housing" => "bg-success",
            "Agriculture" => "bg-success",
            "Healthcare" => "bg-danger",
            "Education" => "bg-warning",
            "Commercial" => "bg-info",
            _ => "bg-secondary"
        };
    }
    
    private string GetSeverityBadgeClass(string severity)
    {
        return severity switch
        {
            "Low" => "success",
            "Medium" => "warning",
            "High" => "danger",
            "Severe" => "dark",
            _ => "secondary"
        };
    }
}
