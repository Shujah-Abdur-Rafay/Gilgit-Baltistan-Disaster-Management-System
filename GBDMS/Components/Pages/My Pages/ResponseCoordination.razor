@page "/response"
@inject IJSRuntime JS
@inject IIncidentRepository IncidentRepository
@inject NavigationManager NavigationManager
@implements IDisposable

<div class="container">
    <h2 class="page-title">Emergency Response Coordination</h2>

    <div class="row mb-4">
        <div class="col-12 d-flex justify-content-center">
            <div class="btn-group">
                <button class="btn @(activeTab == "incidents" ? "btn-success" : "btn-outline-success")" @onclick="@(() => SetActiveTab("incidents"))">
                    <i class="bi bi-exclamation-triangle me-1"></i> Incidents
                </button>
                <button class="btn @(activeTab == "activity" ? "btn-success" : "btn-outline-success")" @onclick="@(() => SetActiveTab("activity"))">
                    <i class="bi bi-journal-text me-1"></i> Activity Log
                </button>
            </div>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(statusMessage))
    {
        <div class="alert alert-@statusType alert-dismissible fade show" role="alert">
            <i class="bi @GetStatusIcon(statusType) me-2"></i>
            @statusMessage
            <button type="button" class="btn-close" @onclick="ClearStatus"></button>
        </div>
    }

    @if (activeTab == "incidents")
    {
        <div class="row">
            <!-- Incident Form -->
            <div class="col-md-5">
                <div class="card">
                    <div class="card-header bg-green">
                        <h5 class="mb-0 text-white"><i class="bi bi-exclamation-triangle me-2"></i>@(currentIncidentId > 0 ? "Update Incident" : "Record New Incident")</h5>
                    </div>
                    <div class="card-body">
                        <div class="mb-4">
                            <label class="form-label">Incident Type</label>
                            <select class="form-select" @bind="incidentType">
                                <option value="Earthquake">Earthquake</option>
                                <option value="Flood">Flood</option>
                                <option value="Landslide">Landslide</option>
                                <option value="Avalanche">Avalanche</option>
                                <option value="GLOF">Glacial Lake Outburst Flood</option>
                                <option value="Other">Other</option>
                            </select>
                        </div>
                        
                        <div class="mb-4">
                            <label class="form-label">Location</label>
                            <select class="form-select" @bind="incidentLocation">
                                <option value="Gilgit">Gilgit</option>
                                <option value="Skardu">Skardu</option>
                                <option value="Hunza">Hunza</option>
                                <option value="Astore">Astore</option>
                                <option value="Ghanche">Ghanche</option>
                                <option value="Ghizer">Ghizer</option>
                                <option value="Nagar">Nagar</option>
                                <option value="Shigar">Shigar</option>
                            </select>
                        </div>
                        
                        <div class="mb-4">
                            <label class="form-label">Status</label>
                            <select class="form-select" @bind="incidentStatus">
                                <option value="New">New - Initial Assessment</option>
                                <option value="Active">Active - Response Underway</option>
                                <option value="Escalating">Escalating - Additional Resources Needed</option>
                                <option value="Stabilizing">Stabilizing - Situation Under Control</option>
                                <option value="Recovery">Recovery Phase</option>
                            </select>
                        </div>
                        
                        <div class="mb-4">
                            <label class="form-label">Severity Level</label>
                            <select class="form-select severity-select level-@severityLevel" @bind="severityLevel">
                                <option value="1">Level 1 - Minor</option>
                                <option value="2">Level 2 - Moderate</option>
                                <option value="3">Level 3 - Significant</option>
                                <option value="4">Level 4 - Severe</option>
                                <option value="5">Level 5 - Catastrophic</option>
                            </select>
                        </div>
                        
                        <div class="mb-4">
                            <label class="form-label">Incident Start Time</label>
                            <input type="datetime-local" class="form-control" @bind="incidentStartTime" @bind:after="UpdateIncidentDuration" />
                        </div>
                        
                        <div class="incident-timer mb-4">
                            <div class="incident-timer-label">Time Since Incident</div>
                            <div class="incident-timer-value">@incidentDuration</div>
                        </div>
                        
                        <div class="mb-4">
                            <label class="form-label">Incident Summary</label>
                            <textarea class="form-control" rows="3" @bind="incidentSummary" placeholder="Describe the incident and initial observations..."></textarea>
                        </div>
                        
                        <div class="d-flex justify-content-between mt-4">
                            <button class="btn btn-secondary" @onclick="ClearForm">
                                <i class="bi bi-x-circle me-1"></i> Clear
                            </button>
                            @if (currentIncidentId > 0)
                            {
                                <button class="btn btn-warning" @onclick="UpdateIncident">
                                    <i class="bi bi-pencil me-1"></i> Update
                                </button>
                            }
                            else
                            {
                                <button class="btn btn-success" @onclick="SaveIncident">
                                    <i class="bi bi-save me-1"></i> Save
                                </button>
                            }
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Incidents List -->
            <div class="col-md-7">
                <div class="card">
                    <div class="card-header bg-green d-flex justify-content-between align-items-center">
                        <h5 class="mb-0 text-white"><i class="bi bi-list-check me-2"></i>Active Incidents</h5>
                        <button class="btn btn-light btn-sm" @onclick="LoadIncidents">
                            <i class="bi bi-arrow-clockwise"></i> Refresh
                        </button>
                    </div>
                    <div class="card-body p-0">
                        <div class="table-responsive">
                            <table class="table table-striped table-hover mb-0">
                                <thead>
                                    <tr>
                                        <th>Type</th>
                                        <th>Location</th>
                                        <th>Status</th>
                                        <th>Severity</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (incidents.Count == 0)
                                    {
                                        <tr>
                                            <td colspan="5" class="text-center py-3">
                                                <i class="bi bi-info-circle text-muted me-2"></i>
                                                No incidents recorded yet.
                                            </td>
                                        </tr>
                                    }
                                    else
                                    {
                                        @foreach (var incident in incidents)
                                        {
                                            <tr>
                                                <td><i class="bi @GetIncidentTypeIcon(incident.Type) me-2"></i>@incident.Type</td>
                                                <td>@incident.Location</td>
                                                <td>
                                                    <span class="badge badge-@incident.Status.ToLower()">
                                                        @incident.Status
                                                    </span>
                                                </td>
                                                <td>
                                                    <span class="badge badge-severity-@incident.SeverityLevel">
                                                        Level @incident.SeverityLevel
                                                    </span>
                                                </td>
                                                <td>
                                                    <button class="btn btn-sm btn-outline-success me-1" @onclick="() => LoadIncident(incident.Id)" title="Edit">
                                                        <i class="bi bi-pencil"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteIncident(incident.Id)" title="Delete">
                                                        <i class="bi bi-trash"></i>
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>

                <!-- Quick Stats -->
                <div class="card mt-4">
                    <div class="card-header bg-green">
                        <h5 class="mb-0 text-white"><i class="bi bi-graph-up me-2"></i>Emergency Response Stats</h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-4 mb-3">
                                <div class="inventory-summary">
                                    <div class="summary-icon bg-success">
                                        <i class="bi bi-exclamation-circle"></i>
                                    </div>
                                    <div>
                                        <div>Active Incidents</div>
                                        <div class="summary-value">@incidents.Count(i => i.Status == "Active" || i.Status == "Escalating")</div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4 mb-3">
                                <div class="inventory-summary">
                                    <div class="summary-icon bg-warning">
                                        <i class="bi bi-shield-exclamation"></i>
                                    </div>
                                    <div>
                                        <div>High Severity</div>
                                        <div class="summary-value">@incidents.Count(i => i.SeverityLevel == "4" || i.SeverityLevel == "5")</div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4 mb-3">
                                <div class="inventory-summary">
                                    <div class="summary-icon bg-info">
                                        <i class="bi bi-geo-alt"></i>
                                    </div>
                                    <div>
                                        <div>Districts Affected</div>
                                        <div class="summary-value">@incidents.Select(i => i.Location).Distinct().Count()</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (activeTab == "activity")
    {
        <div class="card">
            <div class="card-header bg-green">
                <h5 class="mb-0 text-white"><i class="bi bi-journal-text me-2"></i>Activity Log</h5>
            </div>
            <div class="card-body">
                <div class="mb-4">
                    <div class="input-group">
                        <input type="text" class="form-control" placeholder="Add new log entry..." @bind="newLogEntry">
                        <button class="btn btn-success" @onclick="AddLogEntry">
                            <i class="bi bi-plus-circle me-1"></i> Add
                        </button>
                    </div>
                </div>

                <div class="activity-log">
                    @foreach (var log in activityLogs)
                    {
                        <div class="activity-item">
                            <div class="activity-time">
                                <i class="bi bi-clock me-1"></i>
                                @log.Timestamp.ToString("HH:mm")
                            </div>
                            <div class="activity-content">
                                <div class="activity-title">@log.Title</div>
                                <div class="activity-desc">@log.Description</div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
</div>

@code {
    // Tab selection
    private string activeTab = "incidents";
    
    // Current incident form properties
    private int currentIncidentId = 0;
    private string incidentType = "Earthquake";
    private string incidentLocation = "Gilgit";
    private string incidentStatus = "New";
    private string severityLevel = "3";
    private DateTime incidentStartTime = DateTime.Now;
    private string incidentDuration = "0h 00m";
    private string incidentSummary = "";
    
    // Activity logging
    private List<ActivityLog> activityLogs = new();
    private string newLogEntry = "";
    
    // Incidents list
    private List<Incident> incidents = new();
    
    // Status message
    private string statusMessage = "";
    private string statusType = "success";
    
    // Timer for incident duration
    private System.Threading.Timer? durationTimer;

    protected override async Task OnInitializedAsync()
    {
        // Initialize sample activity logs
        InitializeSampleLogs();
        
        // Load incidents from database
        await LoadIncidents();
        
        // Start the incident duration timer - update every 30 seconds
        durationTimer = new System.Threading.Timer(_ =>
        {
            UpdateIncidentDuration();
            InvokeAsync(StateHasChanged);
        }, null, TimeSpan.Zero, TimeSpan.FromSeconds(30));
    }
    
    public void Dispose()
    {
        // Properly dispose the timer to prevent memory leaks
        if (durationTimer != null)
        {
            durationTimer.Dispose();
            durationTimer = null;
        }
    }

    private void SetActiveTab(string tab)
    {
        activeTab = tab;
    }

    private void ClearStatus()
    {
        statusMessage = "";
    }
    
    private void InitializeSampleLogs()
    {
        // Sample activity logs
        activityLogs = new List<ActivityLog>
        {
            new() { Timestamp = DateTime.Now.AddMinutes(-30), Title = "System Started", Description = "Emergency response system initialized." },
            new() { Timestamp = DateTime.Now.AddMinutes(-25), Title = "Alert Received", Description = "Weather alert received for potential flooding in Gilgit region." },
            new() { Timestamp = DateTime.Now.AddMinutes(-20), Title = "Teams Notified", Description = "Emergency response teams placed on standby." },
            new() { Timestamp = DateTime.Now.AddMinutes(-10), Title = "Resources Checked", Description = "Inventory of emergency supplies verified." }
        };
    }
    
    private async Task LoadIncidents()
    {
        try 
        {
            incidents = await IncidentRepository.GetAllAsync();
            incidents = incidents.OrderByDescending(i => i.StartTime).ToList();
        }
        catch (Exception ex)
        {
            ShowMessage($"Error loading incidents: {ex.Message}", "danger");
        }
    }
    
    private async Task SaveIncident()
    {
        try
        {
            var incident = new Incident
            {
                Type = incidentType,
                Location = incidentLocation,
                Status = incidentStatus,
                SeverityLevel = severityLevel,
                StartTime = incidentStartTime,
                Summary = incidentSummary,
                CreatedDate = DateTime.Now
            };
            
            await IncidentRepository.CreateAsync(incident);
            
            // Add to activity log
            AddActivityLog("Incident Recorded", $"New {incidentType} incident recorded in {incidentLocation}.");
            
            // Refresh the list
            await LoadIncidents();
            
            // Clear the form
            ClearForm();
            
            ShowMessage("Incident saved successfully!", "success");
        }
        catch (Exception ex)
        {
            ShowMessage($"Error saving incident: {ex.Message}", "danger");
        }
    }
    
    private async Task UpdateIncident()
    {
        if (currentIncidentId <= 0)
        {
            ShowMessage("No incident selected for update.", "warning");
            return;
        }
        
        try
        {
            var incident = await IncidentRepository.GetByIdAsync(currentIncidentId);
            if (incident == null)
            {
                ShowMessage("Incident not found.", "danger");
                return;
            }
            
            incident.Type = incidentType;
            incident.Location = incidentLocation;
            incident.Status = incidentStatus;
            incident.SeverityLevel = severityLevel;
            incident.StartTime = incidentStartTime;
            incident.Summary = incidentSummary;
            
            await IncidentRepository.UpdateAsync(incident);
            
            // Add to activity log
            AddActivityLog("Incident Updated", $"Incident in {incidentLocation} updated to status: {incidentStatus}.");
            
            // Refresh the list
            await LoadIncidents();
            
            // Clear the form
            ClearForm();
            
            ShowMessage("Incident updated successfully!", "success");
        }
        catch (Exception ex)
        {
            ShowMessage($"Error updating incident: {ex.Message}", "danger");
        }
    }
    
    private async Task LoadIncident(int id)
    {
        try
        {
            var incident = await IncidentRepository.GetByIdAsync(id);
            if (incident == null)
            {
                ShowMessage("Incident not found.", "danger");
                return;
            }
            
            currentIncidentId = incident.Id;
            incidentType = incident.Type;
            incidentLocation = incident.Location;
            incidentStatus = incident.Status;
            severityLevel = incident.SeverityLevel;
            incidentStartTime = incident.StartTime;
            incidentSummary = incident.Summary;
            
            UpdateIncidentDuration();
            
            ShowMessage("Incident loaded for editing.", "info");
        }
        catch (Exception ex)
        {
            ShowMessage($"Error loading incident: {ex.Message}", "danger");
        }
    }
    
    private async Task DeleteIncident(int id)
    {
        if (!await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this incident?"))
        {
            return;
        }
        
        try
        {
            var incident = await IncidentRepository.GetByIdAsync(id);
            if (incident == null)
            {
                ShowMessage("Incident not found.", "danger");
                return;
            }
            
            await IncidentRepository.DeleteAsync(id);
            
            // Add to activity log
            AddActivityLog("Incident Deleted", $"{incident.Type} incident in {incident.Location} deleted from records.");
            
            // Refresh the list
            await LoadIncidents();
            
            ShowMessage("Incident deleted successfully!", "success");
            
            // Clear form if currently editing the deleted incident
            if (currentIncidentId == id)
            {
                ClearForm();
            }
        }
        catch (Exception ex)
        {
            ShowMessage($"Error deleting incident: {ex.Message}", "danger");
        }
    }
    
    private void ClearForm()
    {
        currentIncidentId = 0;
        incidentType = "Earthquake";
        incidentLocation = "Gilgit";
        incidentStatus = "New";
        severityLevel = "3";
        incidentStartTime = DateTime.Now;
        incidentSummary = "";
        UpdateIncidentDuration();
    }
    
    private void UpdateIncidentDuration()
    {
        TimeSpan duration = DateTime.Now - incidentStartTime;
        incidentDuration = $"{duration.Hours}h {duration.Minutes:00}m";
    }
    
    private void AddLogEntry()
    {
        if (!string.IsNullOrWhiteSpace(newLogEntry))
        {
            activityLogs.Insert(0, new ActivityLog
            {
                Timestamp = DateTime.Now,
                Title = "Manual Update",
                Description = newLogEntry
            });
            
            newLogEntry = "";
        }
    }
    
    private void AddActivityLog(string title, string description)
    {
        activityLogs.Insert(0, new ActivityLog
        {
            Timestamp = DateTime.Now,
            Title = title,
            Description = description
        });
    }
    
    private void ShowMessage(string message, string type = "success")
    {
        statusMessage = message;
        statusType = type;
    }
    
    private string GetSeverityClass()
    {
        return severityLevel switch
        {
            "1" => "severity-1",
            "2" => "severity-2",
            "3" => "severity-3",
            "4" => "severity-4",
            "5" => "severity-5",
            _ => ""
        };
    }
    
    private string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "New" => "bg-primary",
            "Active" => "bg-success",
            "Escalating" => "bg-warning text-dark",
            "Stabilizing" => "bg-info text-dark",
            "Recovery" => "bg-secondary",
            _ => "bg-secondary"
        };
    }
    
    private string GetSeverityBadgeClass(string severity)
    {
        return severity switch
        {
            "1" => "bg-success",
            "2" => "bg-info text-dark",
            "3" => "bg-warning text-dark",
            "4" => "bg-danger",
            "5" => "bg-dark",
            _ => "bg-secondary"
        };
    }
    
    private string GetStatusIcon(string type)
    {
        return type switch
        {
            "success" => "bi-check-circle-fill",
            "danger" => "bi-exclamation-circle-fill",
            "warning" => "bi-exclamation-triangle-fill",
            "info" => "bi-info-circle-fill",
            _ => "bi-info-circle-fill"
        };
    }
    
    private string GetIncidentTypeIcon(string type)
    {
        return type switch
        {
            "Earthquake" => "bi-globe-americas",
            "Flood" => "bi-water",
            "Landslide" => "bi-layers-fill",
            "Avalanche" => "bi-snow",
            "GLOF" => "bi-tsunami",
            _ => "bi-exclamation-triangle"
        };
    }
    
    // Activity log model
    private class ActivityLog
    {
        public DateTime Timestamp { get; set; }
        public string Title { get; set; } = "";
        public string Description { get; set; } = "";
    }
}
