@page "/signup"
@inject IUserRepository _userRepository
@inject NavigationManager Navigation
@inject IJSRuntime _JS

<div class="auth-container">
    <div class="auth-card">
        <h1 class="auth-title">Sign Up</h1>
        <p class="auth-subtitle">Create your account to get started.</p>
        <EditForm Model="User" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label for="username">Username</label>
                <InputText id="username" class="form-control" @bind-Value="User.Username" placeholder="Enter your username" required />
            </div>
            <div class="form-group">
                <label for="email">Email</label>
                <InputText id="email" class="form-control" @bind-Value="User.Email" placeholder="Enter your email" required />
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="User.Password" placeholder="Enter your password" required />
            </div>
            <button type="submit" class="btn btn-primary">Sign Up</button>
        </EditForm>
        <p class="auth-footer">Already have an account? <a href="login" class="signup-link">Login</a></p>
    </div>
</div>

@code {
    private User User = new User();

    private async Task HandleValidSubmit()
    {
        // Check if a user with the same email already exists
        var existingUser = await _userRepository.GetUserByEmailAsync(User.Email);
        if (existingUser != null)
        {
            await _JS.InvokeVoidAsync("alert", "A user with this email already exists.");
            return;
        }

        // Hash the password using bcrypt
        User.Password = BCrypt.Net.BCrypt.HashPassword(User.Password);

        try
        {
            var createdUser = await _userRepository.CreateAsync(User);
            await _JS.InvokeVoidAsync("alert", "User Registered Successfully.");
            Navigation.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            await _JS.InvokeVoidAsync("alert", $"Failed to register: {ex.Message}");
        }
    }
}
