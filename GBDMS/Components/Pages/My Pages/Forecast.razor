@page "/forecast"
@inject IJSRuntime JS
@using System.Text.Json

<div class="container-fluid mt-4">
    <h2 class="mb-4">Weather Forecast for Gilgit-Baltistan</h2>

    <div class="row">
        <!-- Location Selection and Current Weather -->
        <div class="col-md-4 mb-4">
            <!-- Location Selection Card -->
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-success text-white">
                    <h5 class="mb-0">Location</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label class="form-label">Select District</label>
                        <select class="form-select" @bind="selectedDistrict" @bind:after="LoadWeatherData">
                            <option value="Gilgit">Gilgit</option>
                            <option value="Skardu">Skardu</option>
                            <option value="Hunza">Hunza</option>
                            <option value="Astore">Astore</option>
                            <option value="Ghanche">Ghanche</option>
                            <option value="Ghizer">Ghizer</option>
                            <option value="Nagar">Nagar</option>
                            <option value="Shigar">Shigar</option>
                        </select>
                    </div>
                </div>
            </div>

            <!-- Current Weather -->
            <div class="card shadow-sm">
                <div class="card-header bg-success text-white">
                    <h5 class="mb-0">Current Weather</h5>
                </div>
                <div class="card-body text-center">
                    @if (isLoading)
                    {
                        <div class="d-flex justify-content-center my-4">
                            <div class="spinner-border text-success" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else
                    {
                        <h3>@selectedDistrict</h3>
                        <div class="current-weather">
                            <img src="@GetWeatherIconUrl(currentWeather.IconCode)" alt="@currentWeather.Description" class="weather-icon" />
                            <div class="temp-container">
                                <span class="temperature">@currentWeather.Temperature°C</span>
                                <span class="feels-like">Feels like @currentWeather.FeelsLike°C</span>
                            </div>
                        </div>
                        <p class="weather-description">@currentWeather.Description</p>
                        <div class="weather-details mt-3">
                            <div class="row g-0">
                                <div class="col-6 border-end">
                                    <div class="detail-item">
                                        <i class="bi bi-droplet-fill text-success"></i>
                                        <span>@currentWeather.Humidity%</span>
                                    </div>
                                    <div class="detail-label">Humidity</div>
                                </div>
                                <div class="col-6">
                                    <div class="detail-item">
                                        <i class="bi bi-wind text-success"></i>
                                        <span>@currentWeather.WindSpeed km/h</span>
                                    </div>
                                    <div class="detail-label">Wind</div>
                                </div>
                            </div>
                            <div class="row g-0 mt-3">
                                <div class="col-6 border-end">
                                    <div class="detail-item">
                                        <i class="bi bi-cloud-fill text-success"></i>
                                        <span>@currentWeather.Clouds%</span>
                                    </div>
                                    <div class="detail-label">Cloud Cover</div>
                                </div>
                                <div class="col-6">
                                    <div class="detail-item">
                                        <i class="bi bi-eye-fill text-success"></i>
                                        <span>@currentWeather.Visibility km</span>
                                    </div>
                                    <div class="detail-label">Visibility</div>
                                </div>
                            </div>
                        </div>
                        <div class="text-center mt-3">
                            <small class="text-muted">Last updated: @currentWeather.LastUpdated.ToString("HH:mm, dd MMM yyyy")</small>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Right Column: Forecast and Map -->
        <div class="col-md-8">
            <!-- Daily Forecast -->
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-success text-white">
                    <h5 class="mb-0">5-Day Forecast</h5>
                </div>
                <div class="card-body">
                    @if (isLoading)
                    {
                        <div class="d-flex justify-content-center my-4">
                            <div class="spinner-border text-success" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="row">
                            @foreach (var day in dailyForecast)
                            {
                                <div class="col forecast-column mb-3">
                                    <div class="forecast-card text-center">
                                        <div class="forecast-day">@day.Date.ToString("ddd dd")</div>
                                        <img src="@GetWeatherIconUrl(day.IconCode)" alt="@day.Description" class="forecast-icon" />
                                        <div class="forecast-temp">
                                            <span class="high">@day.MaxTemp°</span>
                                            <span class="low">@day.MinTemp°</span>
                                        </div>
                                        <div class="forecast-desc">@day.Description</div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>

            <!-- Weather Map -->
            <div class="card shadow-sm">
                <div class="card-header bg-success text-white">
                    <h5 class="mb-0">Weather Map</h5>
                </div>
                <div class="card-body p-0">
                    <div id="weatherMap" style="width: 100%; height: 350px;"></div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    // Variables
    private string selectedDistrict = "Gilgit";
    private CurrentWeather currentWeather = new();
    private List<DailyForecast> dailyForecast = new();
    private bool isMapInitialized = false;
    private bool isLoading = true;

    // API key (kept for potential future use)
    private string apiKey = "1e4eeb5cae70d8aa48f29ac1c9d4c899";

    // Dictionary to store district coordinates
    private readonly Dictionary<string, (double Lat, double Lon)> districtCoordinates = new()
    {
        { "Gilgit", (35.9212, 74.3481) },
        { "Skardu", (35.2896, 75.6372) },
        { "Hunza", (36.3195, 74.6472) },
        { "Astore", (35.3665, 74.8559) },
        { "Ghanche", (35.2939, 76.7298) },
        { "Ghizer", (36.3022, 73.3498) },
        { "Nagar", (36.2579, 74.0799) },
        { "Shigar", (35.4765, 75.5420) }
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadWeatherData();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitializeWeatherMap();
        }
    }

    /// <summary>
    /// Load weather data for the selected district
    /// </summary>
    private async Task LoadWeatherData()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            await Task.Delay(500); // Simulate network delay
            await GenerateWeatherData();

            if (isMapInitialized)
            {
                await UpdateWeatherMap();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading weather data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    /// <summary>
    /// Generate weather data
    /// </summary>
    private async Task GenerateWeatherData()
    {
        try
        {
            var random = new Random();
            
            // Get temperature based on district and season
            var temp = GetTemperatureForDistrict(selectedDistrict);

            // Generate current weather
            currentWeather = new CurrentWeather
            {
                Temperature = temp,
                FeelsLike = temp - random.Next(2, 5),
                Description = GetWeatherDescription(temp),
                IconCode = GetIconCodeForTemp(temp),
                Humidity = random.Next(30, 85),
                WindSpeed = random.Next(5, 20),
                Clouds = random.Next(0, 100),
                Visibility = random.Next(5, 15),
                LastUpdated = DateTime.Now
            };

            // Generate daily forecast
            dailyForecast.Clear();
            for (int i = 0; i < 5; i++)
            {
                var dayTemp = GetTemperatureForDistrict(selectedDistrict) + random.Next(-5, 6);
                dailyForecast.Add(new DailyForecast
                {
                    Date = DateTime.Now.AddDays(i),
                    MaxTemp = dayTemp,
                    MinTemp = dayTemp - random.Next(5, 10),
                    Description = GetWeatherDescription(dayTemp),
                    IconCode = GetIconCodeForTemp(dayTemp),
                    PrecipProbability = random.Next(0, 80)
                });
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error generating weather data: {ex.Message}");
            await Task.CompletedTask;
        }
    }

    /// <summary>
    /// Initialize the weather map
    /// </summary>
    private async Task InitializeWeatherMap()
    {
        try
        {
            // Center on selected district
            var coords = districtCoordinates[selectedDistrict];
            
            // Initialize map with OpenStreetMap 
            await JS.InvokeVoidAsync("eval", @"
                // Create map centered on Gilgit-Baltistan
                let map = L.map('weatherMap').setView([" + coords.Lat + ", " + coords.Lon + @"], 7);
                
                // Add base map layer
                L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
                    attribution: '&copy; <a href=""https://www.openstreetmap.org/copyright"">OpenStreetMap</a> contributors'
                }).addTo(map);
                
                // Create temperature layer
                window.tempLayer = L.layerGroup().addTo(map);
                
                // Add district markers
                const districts = [
                    { name: 'Gilgit', lat: 35.9212, lng: 74.3481 },
                    { name: 'Skardu', lat: 35.2896, lng: 75.6372 },
                    { name: 'Hunza', lat: 36.3195, lng: 74.6472 },
                    { name: 'Astore', lat: 35.3665, lng: 74.8559 },
                    { name: 'Ghanche', lat: 35.2939, lng: 76.7298 },
                    { name: 'Ghizer', lat: 36.3022, lng: 73.3498 },
                    { name: 'Nagar', lat: 36.2579, lng: 74.0799 },
                    { name: 'Shigar', lat: 35.4765, lng: 75.5420 }
                ];
                
                districts.forEach(d => {
                    L.marker([d.lat, d.lng])
                        .addTo(map)
                        .bindPopup(d.name);
                });
                
                window.weatherMap = map;
            ");
            
            isMapInitialized = true;
            await UpdateWeatherMap();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing map: {ex.Message}");
        }
    }

    /// <summary>
    /// Update the weather map to show temperature data for each district
    /// </summary>
    private async Task UpdateWeatherMap()
    {
        try
        {
            // Center on selected district
            var coords = districtCoordinates[selectedDistrict];
            
            // Create temperature data for each district
            var districtData = new List<(string name, double lat, double lon, int temp)>();
            
            foreach (var district in districtCoordinates.Keys)
            {
                var dCoords = districtCoordinates[district];
                districtData.Add((
                    district,
                    dCoords.Lat,
                    dCoords.Lon,
                    GetTemperatureForDistrict(district)
                ));
            }
            
            // Pass the data as JSON
            var jsDistrictData = System.Text.Json.JsonSerializer.Serialize(districtData);
            
            // Generate temperature data for the map
            await JS.InvokeVoidAsync("eval", @"
                // Center map on selected district
                window.weatherMap.setView([" + coords.Lat + ", " + coords.Lon + @"], 7);
                
                // Clear temperature layer
                window.tempLayer.clearLayers();

                // Process district data
                const districts = " + jsDistrictData + @";

                // Add temperature data to the map
                districts.forEach(d => {
                    // Temperature markers with color based on temperature
                    const tempColor = d.temp < 0 ? '#00bcd4' : 
                                     d.temp < 10 ? '#4caf50' : 
                                     d.temp < 20 ? '#8bc34a' : '#f44336';
                    
                    const tempMarker = L.circleMarker([d.lat, d.lon], {
                        radius: 15,
                        color: tempColor,
                        fillColor: tempColor,
                        fillOpacity: 0.5
                    }).bindPopup(`<b>${d.name}</b><br>${d.temp}°C`);
                    
                    window.tempLayer.addLayer(tempMarker);
                });
            ");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating map: {ex.Message}");
        }
    }

    // Helper methods
    private string ToTitleCase(string text)
    {
        if (string.IsNullOrWhiteSpace(text))
            return text;

        var cultures = System.Globalization.CultureInfo.InvariantCulture;
        var textInfo = cultures.TextInfo;
        return textInfo.ToTitleCase(text.ToLower());
    }

    private string GetWeatherIconUrl(string iconCode)
    {
        return $"https://openweathermap.org/img/wn/{iconCode}@2x.png";
    }

    private int GetTemperatureForDistrict(string district)
    {
        // Generate realistic temperatures based on season and district elevation
        var month = DateTime.Now.Month;
        var baseTemp = month switch
        {
            12 or 1 or 2 => -5, // Winter
            3 or 4 => 8,        // Spring
            5 or 6 or 7 or 8 => 25, // Summer
            _ => 12             // Fall
        };

        // Adjust for elevation differences between districts
        return district switch
        {
            "Gilgit" => baseTemp,
            "Skardu" => baseTemp - 2,
            "Hunza" => baseTemp - 3,
            "Astore" => baseTemp - 1,
            "Ghanche" => baseTemp - 4,
            "Ghizer" => baseTemp - 1,
            "Nagar" => baseTemp - 3,
            "Shigar" => baseTemp - 2,
            _ => baseTemp
        };
    }

    private string GetWeatherDescription(int temperature)
    {
        if (temperature < -5) return "Freezing";
        if (temperature < 0) return "Very Cold";
        if (temperature < 5) return "Cold";
        if (temperature < 15) return "Cool";
        if (temperature < 25) return "Mild";
        if (temperature < 30) return "Warm";
        return "Hot";
    }

    private string GetIconCodeForTemp(int temperature)
    {
        // Use weather icons based on temperature
        var season = DateTime.Now.Month;

        if (temperature < 0) return "13d"; // Snow
        if (temperature < 5)
        {
            if (season is 12 or 1 or 2) return "13d"; // Snow in winter
            return "09d"; // Rain in other seasons
        }
        if (temperature < 15) return "04d"; // Cloudy
        if (temperature < 25) return "03d"; // Partly cloudy
        return "01d"; // Clear/sunny
    }

    // Data models
    private class CurrentWeather
    {
        public int Temperature { get; set; } = 0;
        public int FeelsLike { get; set; } = 0;
        public string Description { get; set; } = "Clear";
        public string IconCode { get; set; } = "01d";
        public int Humidity { get; set; } = 50;
        public int WindSpeed { get; set; } = 10;
        public int Clouds { get; set; } = 0;
        public int Visibility { get; set; } = 10;
        public DateTime LastUpdated { get; set; } = DateTime.Now;
    }

    private class DailyForecast
    {
        public DateTime Date { get; set; } = DateTime.Now;
        public int MaxTemp { get; set; } = 0;
        public int MinTemp { get; set; } = 0;
        public string Description { get; set; } = "Clear";
        public string IconCode { get; set; } = "01d";
        public int PrecipProbability { get; set; } = 0;
    }
}
