@page "/test"
@inject GBDMS.Services.AuthenticationService AuthService
@inject GBDMS.Services.ToastService ToastService
@inject IJSRuntime JS
@using System
@using System.Collections.Generic
@using System.Linq

<title>Disaster Management System</title>

<style>
    .header {
        text-align: center;
        padding: 1.5rem 0;
        margin-bottom: 2rem;
        position: relative;
    }

    .header h1 {
        color: #198754;
        font-weight: 700;
        margin-bottom: 0.5rem;
    }

    .header p {
        color: #495057;
        font-size: 1.2rem;
        margin-bottom: 1.5rem;
    }

    .green-strip {
        background-color: #198754;
        padding: 12px 0;
        margin-bottom: 2rem;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .green-strip-btn {
        background-color: transparent;
        color: white;
        border: 2px solid white;
        border-radius: 30px;
        padding: 6px 20px;
        margin: 0 10px;
        font-weight: 600;
        transition: all 0.3s ease;
    }

    .green-strip-btn:hover {
        background-color: white;
        color: #198754;
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    }

    .card {
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        border-radius: 8px;
        overflow: hidden;
    }

    .card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 20px rgba(25, 135, 84, 0.15) !important;
    }

    .card-img-top {
        height: 180px;
        object-fit: cover;
        border-bottom: 3px solid #198754;
    }

    .card-body {
        padding: 1.25rem;
    }

    .card-text {
        font-size: 1.1rem;
    }

    .forest-green-bg {
        background-color: #388E65; /* Updated darker green color */
    }

    .section-header h2 {
        color: white !important;
        font-weight: bold;
    }

    .page-header {
        border-bottom: 3px solid #388E65;
    }

    .page-header h1 {
        color: #388E65;
        font-weight: bold;
    }

    .text-medium {
        color: #666;
        font-size: 1.1rem;
    }
</style>

<div class="container-fluid p-0">
    <div class="page-header bg-white shadow-sm text-center p-4 mb-4">
        <h1 class="mb-2">Gilgit Baltistan Disaster Management System</h1>
        <p class="text-medium mb-0">Gilgit-Baltistan, Pakistan</p>
    </div>

    <div class="section-header forest-green-bg text-light text-center py-4 mb-4">
        <h2 class="mb-0">DISASTER MANAGEMENT FACILITIES</h2>
    </div>
</div>

<main class="container my-4">
    <div class="row g-4">
        @foreach (var card in GetVisibleCards())
        {
            <div class="col-12 col-sm-6 col-md-4 col-lg-3">
                @if (IsCardAccessible(card.Route))
                {
                    <NavLink class="text-decoration-none" href="@card.Route">
                        <div class="card h-100 shadow-sm border-0">
                            <img src="@card.Img" class="card-img-top" alt="@card.Title">
                            <div class="card-body text-center">
                                <p class="card-text text-dark fw-bold">@GetCardDisplayTitle(card.Title, card.Route)</p>
                            </div>
                        </div>
                    </NavLink>
                }
                else
                {
                    <div class="text-decoration-none" style="cursor: pointer;" @onclick="() => ShowAccessPrompt(card.Route)">
                        <div class="card h-100 shadow-sm border-0">
                            <img src="@card.Img" class="card-img-top" alt="@card.Title">
                            <div class="card-body text-center">
                                <p class="card-text text-dark fw-bold">@GetCardDisplayTitle(card.Title, card.Route)</p>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</main>

@code {
    private List<(string Img, string Title, string Route)> AllCards = new()
    {
        ("https://storage.googleapis.com/a1aa/image/u8Axf4VCkxxVZibeE0qlUxhOh124Rd5ruIoenYpf3sOtqF3PB.jpg", "Hazard and Risk Atlas", "/riskatlas"),
        ("https://storage.googleapis.com/a1aa/image/wP9KKSDlizp1INjyNsvSgRIvwr1XXb3AGBRf3UYKQeQtax9TA.jpg", "Disaster Warning and Information", "/warning"),
        ("https://storage.googleapis.com/a1aa/image/rf4jkSurqOXkAiKcK3sqROCBzm9j3RhKpZjC6IAxq98Yt4eTA.jpg", "Weather Forecast", "/forecast"),
        ("https://storage.googleapis.com/a1aa/image/SqDeqKrfsYqjmU0d2CCDzacgUyKHfKr8I7wz6Ufwz9EarF3PB.jpg", "Store Inventory and Relief Distribution", "/inventory"),
        ("https://storage.googleapis.com/a1aa/image/8EMKOxzE0SqtDl34rUPq6E3Hb8mcCfsbkPUoZip0GY2Xt4eTA.jpg", "Rapid Damage Assessment", "/damage"),
        ("https://storage.googleapis.com/a1aa/image/Yw1fX2GECJ0zaierMsBJtOMpQV7WtAPLE6glJv30Bm95ax9TA.jpg", "Rapid Response and Rescue Coordination", "/response"),
        ("https://storage.googleapis.com/a1aa/image/23lfpsAz86wfbU9Lh2Tpg0aJtVkNceMXgysT7QPc769k1i7nA.jpg", "Damages & Losses", "/losses"),
        ("https://storage.googleapis.com/a1aa/image/RFwAAfNxHazJVixgVfCbdZrpWqWis6VBbU9Z0mqbykV4ax9TA.jpg", "NGO Mapping", "/ngo")
    };

    // Cards accessible to normal users (warning info, forecast, ngo mapping)
    private List<string> GuestAccessibleRoutes = new() { "/warning", "/forecast", "/ngo" };

    private List<(string Img, string Title, string Route)> GetVisibleCards()
    {
        return AllCards; // Show all cards but control access
    }

    private bool IsCardAccessible(string route)
    {
        if (AuthService.IsPrivileged)
            return true;

        return GuestAccessibleRoutes.Contains(route);
    }

    private async Task ShowAccessPrompt(string route)
    {
        await ToastService.ShowInfo("This facility requires a privileged account. Please login to access advanced disaster management features.");
    }

    private string GetCardDisplayTitle(string title, string route)
    {
        // Add lock emoji for cards that require special access
        if (!IsCardAccessible(route))
        {
            return $"{title} 🔒";
        }
        return title;
    }
}
