@page "/warning"
@inject IJSRuntime JS
@inject IUserRepository _userRepository
@inject NavigationManager Navigation

<div class="container-fluid">
    <h2 class="page-heading mb-4">Disaster Warning System</h2>

    <div class="row">
        <!-- Alert Panel -->
        <div class="col-md-5">
            <div class="card border-success mb-4">
                <div class="card-header bg-success text-white">
                    <h5 class="mb-0">
                        <i class="bi bi-exclamation-triangle-fill me-2"></i>Active Alerts
                    </h5>
                </div>
                <div class="card-body">
                    @if (activeAlerts.Count > 0)
                    {
                        <div class="list-group">
                            @foreach (var alert in activeAlerts)
                            {
                                <div class="list-group-item list-group-item-action @GetAlertClass(alert.Severity)">
                                    <div class="d-flex w-100 justify-content-between">
                                        <h5 class="mb-1">@alert.Type</h5>
                                        <span class="badge @GetBadgeClass(alert.Severity)">@alert.Severity</span>
                                    </div>
                                    <p class="mb-1">@alert.Message</p>
                                    <small>@alert.Area - @FormatTime(alert.Time)</small>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-success" role="alert">
                            <i class="bi bi-check-circle me-2"></i>No active alerts at this time
                        </div>
                    }
                </div>
                <div class="card-footer">
                    <button class="btn btn-outline-success" @onclick="RefreshAlerts">
                        <i class="bi bi-arrow-clockwise me-2"></i>Refresh Alerts
                    </button>
                    @if (isAdmin)
                    {
                        <button class="btn btn-secondary float-end" @onclick="SimulateAlert">
                            <i class="bi bi-lightning me-2"></i>Create Alert
                        </button>
                    }
                </div>
            </div>

            <!-- Simple Alert Subscription -->
            <div class="card">
                <div class="card-header bg-success text-white">
                    <h5 class="mb-0">Alert Notifications</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label class="form-label">District</label>
                        <select class="form-select" @bind="selectedDistrict">
                            <option value="all">All Districts</option>
                            <option value="Gilgit">Gilgit</option>
                            <option value="Skardu">Skardu</option>
                            <option value="Hunza">Hunza</option>
                            <option value="Astore">Astore</option>
                            <option value="Ghanche">Ghanche</option>
                            <option value="Ghizer">Ghizer</option>
                            <option value="Nagar">Nagar</option>
                            <option value="Shigar">Shigar</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Email for Notifications</label>
                        <input type="email" class="form-control" placeholder="Email Address" @bind="contactEmail">
                    </div>
                    <button class="btn btn-success w-100" @onclick="SubscribeToAlerts">
                        <i class="bi bi-bell me-2"></i>Subscribe to Alerts
                    </button>
                </div>
            </div>
        </div>

        <!-- Map -->
        <div class="col-md-7">
            <div class="card">
                <div class="card-header bg-success text-white">
                    <h5 class="mb-0">Hazard Map</h5>
                </div>
                <div class="card-body p-0">
                    <div id="warningMap" style="width: 100%; height: 500px;"></div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    // User authentication
    private bool isAdmin = false;
    private User currentUser;

    // Alert variables
    private List<DisasterAlert> activeAlerts = new();
    private string selectedDistrict = "all";
    private string contactEmail = "";

    protected override async Task OnInitializedAsync()
    {
        // Fetch initial alerts
        await RefreshAlerts();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Initialize the map
            await InitializeWarningMap();
        }
    }

    private async Task InitializeWarningMap()
    {
        try
        {
            // Center on Gilgit-Baltistan region
            await JS.InvokeVoidAsync("eval", @"
                let map = L.map('warningMap').setView([35.8884, 74.4584], 7);
                L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(map);

                // Add markers for key locations
                const locations = [
                    { name: 'Gilgit', lat: 35.9212, lng: 74.3481 },
                    { name: 'Skardu', lat: 35.2896, lng: 75.6372 },
                    { name: 'Hunza', lat: 36.3195, lng: 74.6472 },
                    { name: 'Astore', lat: 35.3665, lng: 74.8559 },
                    { name: 'Ghanche', lat: 35.2939, lng: 76.7298 },
                    { name: 'Ghizer', lat: 36.3022, lng: 73.3498 },
                    { name: 'Nagar', lat: 36.2579, lng: 74.0799 },
                    { name: 'Shigar', lat: 35.4765, lng: 75.5420 }
                ];

                locations.forEach(loc => {
                    L.marker([loc.lat, loc.lng])
                        .addTo(map)
                        .bindPopup(loc.name);
                });

                window.warningMap = map;
            ");

            // Add current alerts to map
            await UpdateAlertMarkers();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing map: {ex.Message}");
        }
    }

    private async Task UpdateAlertMarkers()
    {
        try {
            // Clear existing markers
            await JS.InvokeVoidAsync("eval", @"
                if (window.alertMarkers) {
                    window.alertMarkers.forEach(marker => marker.remove());
                }
                window.alertMarkers = [];
            ");

            // Add markers for active alerts
            foreach (var alert in activeAlerts)
            {
                var coords = GetDistrictCoordinates(alert.Area);

                await JS.InvokeVoidAsync("eval", $@"
                    let marker = L.marker([{coords.Lat}, {coords.Lng}], {{
                        icon: L.divIcon({{
                            html: '<div class=""alert-marker {GetAlertMarkerClass(alert.Severity)}""><i class=""bi bi-exclamation-triangle-fill""></i></div>',
                            className: '',
                            iconSize: [24, 24]
                        }})
                    }}).addTo(window.warningMap);

                    marker.bindPopup(`
                        <strong>{alert.Type} - {alert.Severity}</strong><br>
                        {alert.Message}<br>
                        <small>{alert.Area} - {FormatTime(alert.Time)}</small>
                    `);

                    if (!window.alertMarkers) window.alertMarkers = [];
                    window.alertMarkers.push(marker);
                ");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating alert markers: {ex.Message}");
        }
    }

    private async Task RefreshAlerts()
    {
        try
        {
            // In a real app, fetch from backend
            // Simulate fetching alerts for demo purposes
            var alertTypes = new[] { "Earthquake", "Flood", "Landslide", "Avalanche", "GLOF" };
            var districts = new[] { "Gilgit", "Skardu", "Hunza", "Astore", "Ghanche", "Ghizer", "Nagar", "Shigar" };
            var severities = new[] { "Warning", "Watch", "Emergency", "Advisory" };

            var random = new Random();
            activeAlerts.Clear();

            // Generate 0-3 random alerts
            var alertCount = random.Next(4);
            for (var i = 0; i < alertCount; i++)
            {
                var alertType = alertTypes[random.Next(alertTypes.Length)];
                var district = districts[random.Next(districts.Length)];
                var severity = severities[random.Next(severities.Length)];

                activeAlerts.Add(new DisasterAlert
                    {
                        Type = alertType,
                        Area = district,
                        Severity = severity,
                        Message = $"{severity} for {alertType} in {district} district. Take appropriate precautions.",
                        Time = DateTime.Now.AddMinutes(-random.Next(60))
                    });
            }

            // Update map markers
            await UpdateAlertMarkers();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error refreshing alerts: {ex.Message}");
        }
    }

    private async Task SimulateAlert()
    {
        var random = new Random();
        var alertTypes = new[] { "Earthquake", "Flood", "Landslide", "Avalanche", "GLOF" };
        var districts = new[] { "Gilgit", "Skardu", "Hunza", "Astore", "Ghanche", "Ghizer", "Nagar", "Shigar" };
        var severities = new[] { "Warning", "Emergency" };

        var alertType = alertTypes[random.Next(alertTypes.Length)];
        var district = districts[random.Next(districts.Length)];
        var severity = severities[random.Next(severities.Length)];

        var newAlert = new DisasterAlert
            {
                Type = alertType,
                Area = district,
                Severity = severity,
                Message = $"{severity}: {alertType} detected in {district}. Take immediate precautions.",
                Time = DateTime.Now
            };

        activeAlerts.Add(newAlert);

        // Update map
        await UpdateAlertMarkers();
    }

    private async Task SubscribeToAlerts()
    {
        // This would save the subscription to the database in a real app
        // For now, we'll just show a confirmation
        await JS.InvokeVoidAsync("alert", $"Successfully subscribed to alerts for {selectedDistrict}");
    }

    private string GetAlertClass(string severity)
    {
        return severity switch
        {
            "Emergency" => "list-group-item-danger",
            "Warning" => "list-group-item-warning",
            "Watch" => "list-group-item-info",
            "Advisory" => "list-group-item-light",
            _ => "list-group-item-secondary"
        };
    }

    private string GetBadgeClass(string severity)
    {
        return severity switch
        {
            "Emergency" => "bg-danger",
            "Warning" => "bg-warning text-dark",
            "Watch" => "bg-info text-dark",
            "Advisory" => "bg-light text-dark",
            _ => "bg-secondary"
        };
    }

    private string GetAlertMarkerClass(string severity)
    {
        return severity switch
        {
            "Emergency" => "alert-marker-emergency",
            "Warning" => "alert-marker-warning",
            "Watch" => "alert-marker-watch",
            "Advisory" => "alert-marker-advisory",
            _ => "alert-marker-default"
        };
    }

    private string FormatTime(DateTime time)
    {
        return time.ToString("HH:mm, dd MMM yyyy");
    }

    private (double Lat, double Lng) GetDistrictCoordinates(string district)
    {
        return district switch
        {
            "Gilgit" => (35.9212, 74.3481),
            "Skardu" => (35.2896, 75.6372),
            "Hunza" => (36.3195, 74.6472),
            "Astore" => (35.3665, 74.8559),
            "Ghanche" => (35.2939, 76.7298),
            "Ghizer" => (36.3022, 73.3498),
            "Nagar" => (36.2579, 74.0799),
            "Shigar" => (35.4765, 75.5420),
            _ => (35.8884, 74.4584) // Default to center of GB region
        };
    }

    // Data model
    public class DisasterAlert
    {
        public string Type { get; set; }
        public string Severity { get; set; }
        public string Area { get; set; }
        public string Message { get; set; }
        public DateTime Time { get; set; }
    }
}
