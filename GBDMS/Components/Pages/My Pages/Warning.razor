@page "/warning"
@inject IJSRuntime JS

<div class="container-fluid">
    <h2 class="mb-4">Disaster Warning and Information System</h2>

    <div class="row">
        <!-- Alert Panel -->
        <div class="col-md-4 mb-4">
            <div class="card border-danger">
                <div class="card-header bg-danger text-white">
                    <h5 class="mb-0">
                        <i class="bi bi-exclamation-triangle-fill me-2"></i>Active Alerts
                    </h5>
                </div>
                <div class="card-body">
                    @if (activeAlerts.Count > 0)
                    {
                        <div class="list-group">
                            @foreach (var alert in activeAlerts)
                            {
                                <div class="list-group-item list-group-item-action @GetAlertClass(alert.Severity)">
                                    <div class="d-flex w-100 justify-content-between">
                                        <h5 class="mb-1">@alert.Type</h5>
                                        <span class="badge @GetBadgeClass(alert.Severity)">@alert.Severity</span>
                                    </div>
                                    <p class="mb-1">@alert.Message</p>
                                    <small>@alert.Area - @FormatTime(alert.Time)</small>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-success" role="alert">
                            <i class="bi bi-check-circle me-2"></i>No active alerts at this time
                        </div>
                    }
                </div>
                <div class="card-footer">
                    <button class="btn btn-outline-danger" @onclick="RefreshAlerts">
                        <i class="bi bi-arrow-clockwise me-2"></i>Refresh Alerts
                    </button>
                    <button class="btn btn-secondary float-end" @onclick="SimulateAlert">
                        <i class="bi bi-lightning me-2"></i>Simulate Alert
                    </button>
                </div>
            </div>

            <!-- Alert Subscription -->
            <div class="card mt-3">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">Alert Notifications</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label class="form-label">District</label>
                        <select class="form-select" @bind="selectedDistrict">
                            <option value="all">All Districts</option>
                            <option value="Gilgit">Gilgit</option>
                            <option value="Skardu">Skardu</option>
                            <option value="Hunza">Hunza</option>
                            <option value="Astore">Astore</option>
                            <option value="Ghanche">Ghanche</option>
                            <option value="Ghizer">Ghizer</option>
                            <option value="Nagar">Nagar</option>
                            <option value="Shigar">Shigar</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Alert Types</label>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="earthquake" @bind="alertTypes.Earthquake">
                            <label class="form-check-label" for="earthquake">Earthquake</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="flood" @bind="alertTypes.Flood">
                            <label class="form-check-label" for="flood">Flood</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="landslide" @bind="alertTypes.Landslide">
                            <label class="form-check-label" for="landslide">Landslide</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="avalanche" @bind="alertTypes.Avalanche">
                            <label class="form-check-label" for="avalanche">Avalanche</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="glof" @bind="alertTypes.GLOF">
                            <label class="form-check-label" for="glof">Glacial Lake Outburst Flood (GLOF)</label>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Notification Method</label>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="sms" @bind="notificationMethods.SMS">
                            <label class="form-check-label" for="sms">SMS</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="email" @bind="notificationMethods.Email">
                            <label class="form-check-label" for="email">Email</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="app" @bind="notificationMethods.App">
                            <label class="form-check-label" for="app">Mobile App</label>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Contact Information</label>
                        <input type="text" class="form-control mb-2" placeholder="Phone Number" @bind="contactInfo.Phone">
                        <input type="email" class="form-control" placeholder="Email Address" @bind="contactInfo.Email">
                    </div>
                    <button class="btn btn-primary w-100" @onclick="SubscribeToAlerts">
                        <i class="bi bi-bell me-2"></i>Subscribe to Alerts
                    </button>
                </div>
            </div>
        </div>

        <!-- Map and Information -->
        <div class="col-md-8">
            <div class="card">
                <div class="card-header bg-info text-white">
                    <h5 class="mb-0">Hazard Map</h5>
                </div>
                <div class="card-body p-0">
                    <div id="warningMap" style="width: 100%; height: 400px;"></div>
                </div>
            </div>

            <!-- Recent History -->
            <div class="card mt-3">
                <div class="card-header bg-dark text-white">
                    <h5 class="mb-0">Recent Disaster History</h5>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th>Date</th>
                                    <th>Type</th>
                                    <th>Location</th>
                                    <th>Severity</th>
                                    <th>Impact</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var disaster in recentDisasters)
                                {
                                    <tr>
                                        <td>@disaster.Date.ToShortDateString()</td>
                                        <td>@disaster.Type</td>
                                        <td>@disaster.Location</td>
                                        <td><span class="badge @GetDisasterBadgeClass(disaster.Severity)">@disaster.Severity</span></td>
                                        <td>@disaster.Impact</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!-- Safety Information -->
            <div class="card mt-3">
                <div class="card-header bg-success text-white">
                    <h5 class="mb-0">Safety Information</h5>
                </div>
                <div class="card-body">
                    <div class="accordion" id="safetyAccordion">
                        <div class="accordion-item">
                            <h2 class="accordion-header" id="earthquakeHeading">
                                <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#earthquakeCollapse" aria-expanded="true" aria-controls="earthquakeCollapse">
                                    Earthquake Safety
                                </button>
                            </h2>
                            <div id="earthquakeCollapse" class="accordion-collapse collapse show" aria-labelledby="earthquakeHeading" data-bs-parent="#safetyAccordion">
                                <div class="accordion-body">
                                    <p><strong>During an earthquake:</strong></p>
                                    <ul>
                                        <li>Drop, Cover, and Hold On: Drop to the ground, take cover under a sturdy table, and hold on until the shaking stops.</li>
                                        <li>Stay away from windows, exterior walls, and anything that could fall.</li>
                                        <li>If outside, stay in open areas away from buildings, trees, and power lines.</li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                        <div class="accordion-item">
                            <h2 class="accordion-header" id="floodHeading">
                                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#floodCollapse" aria-expanded="false" aria-controls="floodCollapse">
                                    Flood Safety
                                </button>
                            </h2>
                            <div id="floodCollapse" class="accordion-collapse collapse" aria-labelledby="floodHeading" data-bs-parent="#safetyAccordion">
                                <div class="accordion-body">
                                    <p><strong>During a flood:</strong></p>
                                    <ul>
                                        <li>Move to higher ground immediately.</li>
                                        <li>Do not walk, swim, or drive through flood waters.</li>
                                        <li>Stay off bridges over fast-moving water.</li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                        <div class="accordion-item">
                            <h2 class="accordion-header" id="landslideHeading">
                                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#landslideCollapse" aria-expanded="false" aria-controls="landslideCollapse">
                                    Landslide Safety
                                </button>
                            </h2>
                            <div id="landslideCollapse" class="accordion-collapse collapse" aria-labelledby="landslideHeading" data-bs-parent="#safetyAccordion">
                                <div class="accordion-body">
                                    <p><strong>If a landslide is occurring:</strong></p>
                                    <ul>
                                        <li>Move quickly away from the path of the landslide.</li>
                                        <li>If escape is not possible, curl into a tight ball and protect your head.</li>
                                        <li>Be alert for flooding that may follow a landslide.</li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                        <div class="accordion-item">
                            <h2 class="accordion-header" id="avalancheHeading">
                                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#avalancheCollapse" aria-expanded="false" aria-controls="avalancheCollapse">
                                    Avalanche Safety
                                </button>
                            </h2>
                            <div id="avalancheCollapse" class="accordion-collapse collapse" aria-labelledby="avalancheHeading" data-bs-parent="#safetyAccordion">
                                <div class="accordion-body">
                                    <p><strong>If caught in an avalanche:</strong></p>
                                    <ul>
                                        <li>Try to move to the side of the avalanche path.</li>
                                        <li>Grab onto anything solid to prevent being carried away.</li>
                                        <li>If carried, swim with the avalanche to stay on top and create an air pocket.</li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                        <div class="accordion-item">
                            <h2 class="accordion-header" id="glofHeading">
                                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#glofCollapse" aria-expanded="false" aria-controls="glofCollapse">
                                    GLOF Safety
                                </button>
                            </h2>
                            <div id="glofCollapse" class="accordion-collapse collapse" aria-labelledby="glofHeading" data-bs-parent="#safetyAccordion">
                                <div class="accordion-body">
                                    <p><strong>During a Glacial Lake Outburst Flood:</strong></p>
                                    <ul>
                                        <li>Evacuate immediately to higher ground.</li>
                                        <li>Follow designated evacuation routes.</li>
                                        <li>Do not return until authorities declare the area safe.</li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    // Alert variables
    private List<DisasterAlert> activeAlerts = new();
    private string selectedDistrict = "all";
    private (bool Earthquake, bool Flood, bool Landslide, bool Avalanche, bool GLOF) alertTypes = (true, true, true, true, true);
    private (bool SMS, bool Email, bool App) notificationMethods = (false, true, false);
    private (string Phone, string Email) contactInfo = ("", "");

    // Recent disasters data
    private List<DisasterRecord> recentDisasters = new();

    protected override async Task OnInitializedAsync()
    {
        // Initialize disaster history
        LoadDisasterHistory();

        // Fetch initial alerts
        await RefreshAlerts();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Initialize the map
            await InitializeWarningMap();
        }
    }

    private async Task InitializeWarningMap()
    {
        try
        {
            // Center on Gilgit-Baltistan region
            await JS.InvokeVoidAsync("eval", @"
                let map = L.map('warningMap').setView([35.8884, 74.4584], 7);
                L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(map);

                // Add markers for key locations
                const locations = [
                    { name: 'Gilgit', lat: 35.9212, lng: 74.3481 },
                    { name: 'Skardu', lat: 35.2896, lng: 75.6372 },
                    { name: 'Hunza', lat: 36.3195, lng: 74.6472 },
                    { name: 'Astore', lat: 35.3665, lng: 74.8559 },
                    { name: 'Ghanche', lat: 35.2939, lng: 76.7298 },
                    { name: 'Ghizer', lat: 36.3022, lng: 73.3498 },
                    { name: 'Nagar', lat: 36.2579, lng: 74.0799 },
                    { name: 'Shigar', lat: 35.4765, lng: 75.5420 }
                ];

                locations.forEach(loc => {
                    L.marker([loc.lat, loc.lng])
                        .addTo(map)
                        .bindPopup(loc.name);
                });

                // Add simple hazard zones
                const hazardZones = [
                    { type: 'Flood', coordinates: [[35.3212, 74.3481], [35.9212, 74.3481], [35.9212, 74.9481], [35.3212, 74.9481]], color: '#0000FF' },
                    { type: 'Landslide', coordinates: [[36.3195, 74.6472], [36.3195, 74.9472], [36.0195, 74.9472], [36.0195, 74.6472]], color: '#FFA500' },
                    { type: 'GLOF', coordinates: [[35.2896, 75.6372], [35.5896, 75.6372], [35.5896, 75.9372], [35.2896, 75.9372]], color: '#00FFFF' }
                ];

                hazardZones.forEach(zone => {
                    L.polygon(zone.coordinates, { color: zone.color, fillOpacity: 0.3 })
                        .addTo(map)
                        .bindPopup(`<strong>${zone.type} Risk Zone</strong><br>Caution advised in this area`);
                });

                window.warningMap = map;
            ");

            // Add current alerts to map
            await UpdateAlertMarkers();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing map: {ex.Message}");
        }
    }

    private async Task UpdateAlertMarkers()
    {
        try
        {
            // Clear existing markers
            await JS.InvokeVoidAsync("eval", @"
                if (window.alertMarkers) {
                    window.alertMarkers.forEach(marker => marker.remove());
                }
                window.alertMarkers = [];
            ");

            // Add markers for active alerts
            foreach (var alert in activeAlerts)
            {
                // Get location coordinates (would come from real data)
                var coords = GetDistrictCoordinates(alert.Area);

                await JS.InvokeVoidAsync("eval", $@"
                    let marker = L.marker([{coords.Lat}, {coords.Lng}], {{
                        icon: L.divIcon({{
                            html: '<div class=""alert-marker {GetAlertMarkerClass(alert.Severity)}""><i class=""bi bi-exclamation-triangle-fill""></i></div>',
                            className: '',
                            iconSize: [24, 24]
                        }})
                    }}).addTo(window.warningMap);

                    marker.bindPopup(`
                        <strong>{alert.Type} - {alert.Severity}</strong><br>
                    {alert.Message}<br>
                        <small>{alert.Area} - {FormatTime(alert.Time)}</small>
                    `);

                    if (!window.alertMarkers) window.alertMarkers = [];
                    window.alertMarkers.push(marker);
                ");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating alert markers: {ex.Message}");
        }
    }

    private async Task RefreshAlerts()
    {
        try
        {
            // In real app, would fetch from backend
            // Simulate fetching alerts for now
            var alertTypes = new[] { "Earthquake", "Flood", "Landslide", "Avalanche", "GLOF" };
            var districts = new[] { "Gilgit", "Skardu", "Hunza", "Astore", "Ghanche", "Ghizer", "Nagar", "Shigar" };
            var severities = new[] { "Warning", "Watch", "Emergency", "Advisory" };

            var random = new Random();
            activeAlerts.Clear();

            // Generate 0-3 random alerts
            var alertCount = random.Next(4);
            for (var i = 0; i < alertCount; i++)
            {
                var alertType = alertTypes[random.Next(alertTypes.Length)];
                var district = districts[random.Next(districts.Length)];
                var severity = severities[random.Next(severities.Length)];

                activeAlerts.Add(new DisasterAlert
                    {
                        Type = alertType,
                        Area = district,
                        Severity = severity,
                        Message = $"{severity} for {alertType} in {district} district. Take appropriate precautions.",
                        Time = DateTime.Now.AddMinutes(-random.Next(60))
                    });
            }

            // Update map markers
            await UpdateAlertMarkers();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error refreshing alerts: {ex.Message}");
        }
    }

    private async Task SimulateAlert()
    {
        var random = new Random();
        var alertTypes = new[] { "Earthquake", "Flood", "Landslide", "Avalanche", "GLOF" };
        var districts = new[] { "Gilgit", "Skardu", "Hunza", "Astore", "Ghanche", "Ghizer", "Nagar", "Shigar" };
        var severities = new[] { "Warning", "Emergency" };

        var alertType = alertTypes[random.Next(alertTypes.Length)];
        var district = districts[random.Next(districts.Length)];
        var severity = severities[random.Next(severities.Length)];

        var newAlert = new DisasterAlert
            {
                Type = alertType,
                Area = district,
                Severity = severity,
                Message = $"{severity}: {alertType} detected in {district}. Take immediate precautions.",
                Time = DateTime.Now
            };

        activeAlerts.Add(newAlert);

        // Update map
        await UpdateAlertMarkers();
    }

    private async Task SubscribeToAlerts()
    {
        // In real app, would send to backend
        // Show success message
        await JS.InvokeVoidAsync("alert", $"Successfully subscribed to alerts for {selectedDistrict}");
    }

    private void LoadDisasterHistory()
    {
        // Sample historical data for Gilgit-Baltistan
        recentDisasters = new List<DisasterRecord>
        {
            new DisasterRecord
            {
                Date = new DateTime(2022, 8, 19),
                Type = "Flood",
                Location = "Ghizer",
                Severity = "Major",
                Impact = "132 houses damaged, 2 casualties"
            },
            new DisasterRecord
            {
                Date = new DateTime(2022, 7, 5),
                Type = "GLOF",
                Location = "Hunza",
                Severity = "Moderate",
                Impact = "Road damage, temporary evacuations"
            },
            new DisasterRecord
            {
                Date = new DateTime(2022, 4, 12),
                Type = "Landslide",
                Location = "Astore",
                Severity = "Minor",
                Impact = "Road blocked for 2 days"
            },
            new DisasterRecord
            {
                Date = new DateTime(2022, 1, 23),
                Type = "Avalanche",
                Location = "Skardu",
                Severity = "Moderate",
                Impact = "1 casualty, 3 injured"
            },
            new DisasterRecord
            {
                Date = new DateTime(2021, 9, 16),
                Type = "Earthquake",
                Location = "Gilgit",
                Severity = "Minor",
                Impact = "No major damage reported"
            },
            new DisasterRecord
            {
                Date = new DateTime(2021, 7, 28),
                Type = "Flood",
                Location = "Shigar",
                Severity = "Major",
                Impact = "Bridge damaged, 47 houses affected"
            }
        };
    }

    private string GetAlertClass(string severity)
    {
        return severity switch
        {
            "Emergency" => "list-group-item-danger",
            "Warning" => "list-group-item-warning",
            "Watch" => "list-group-item-info",
            "Advisory" => "list-group-item-light",
            _ => "list-group-item-secondary"
        };
    }

    private string GetBadgeClass(string severity)
    {
        return severity switch
        {
            "Emergency" => "bg-danger",
            "Warning" => "bg-warning text-dark",
            "Watch" => "bg-info text-dark",
            "Advisory" => "bg-light text-dark",
            _ => "bg-secondary"
        };
    }

    private string GetDisasterBadgeClass(string severity)
    {
        return severity switch
        {
            "Major" => "bg-danger",
            "Moderate" => "bg-warning text-dark",
            "Minor" => "bg-info text-dark",
            _ => "bg-secondary"
        };
    }

    private string GetAlertMarkerClass(string severity)
    {
        return severity switch
        {
            "Emergency" => "alert-marker-emergency",
            "Warning" => "alert-marker-warning",
            "Watch" => "alert-marker-watch",
            "Advisory" => "alert-marker-advisory",
            _ => "alert-marker-default"
        };
    }

    private string FormatTime(DateTime time)
    {
        return time.ToString("HH:mm, dd MMM yyyy");
    }

    private (double Lat, double Lng) GetDistrictCoordinates(string district)
    {
        return district switch
        {
            "Gilgit" => (35.9212, 74.3481),
            "Skardu" => (35.2896, 75.6372),
            "Hunza" => (36.3195, 74.6472),
            "Astore" => (35.3665, 74.8559),
            "Ghanche" => (35.2939, 76.7298),
            "Ghizer" => (36.3022, 73.3498),
            "Nagar" => (36.2579, 74.0799),
            "Shigar" => (35.4765, 75.5420),
            _ => (35.8884, 74.4584) // Default to center of GB region
        };
    }

    // Data models
    public class DisasterAlert
    {
        public string Type { get; set; }
        public string Severity { get; set; }
        public string Area { get; set; }
        public string Message { get; set; }
        public DateTime Time { get; set; }
    }

    public class DisasterRecord
    {
        public DateTime Date { get; set; }
        public string Type { get; set; }
        public string Location { get; set; }
        public string Severity { get; set; }
        public string Impact { get; set; }
    }
}
