@page "/ngo"
@inject IJSRuntime JS
@inject INgoRepository _ngoRepository

<div class="container-fluid">
    <div class="page-header">
        <h2>NGO Mapping in Gilgit-Baltistan</h2>
        <p class="text-muted">Track and coordinate NGO activities across the region</p>
    </div>

    <div class="row">
        <!-- Filters & Stats Panel -->
        <div class="col-md-3 mb-4">
            <div class="card">
                <div class="card-header bg-success text-white">
                    <h5 class="mb-0">Filters</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label class="form-label">NGO Type</label>
                        <select class="form-select" @bind="selectedNgoType">
                            <option value="">All Types</option>
                            <option value="International">International</option>
                            <option value="National">National</option>
                            <option value="Local">Local</option>
                        </select>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">District</label>
                        <select class="form-select" @bind="selectedDistrict">
                            <option value="">All Districts</option>
                            <option value="Gilgit">Gilgit</option>
                            <option value="Skardu">Skardu</option>
                            <option value="Hunza">Hunza</option>
                            <option value="Astore">Astore</option>
                            <option value="Ghanche">Ghanche</option>
                            <option value="Ghizer">Ghizer</option>
                            <option value="Nagar">Nagar</option>
                            <option value="Shigar">Shigar</option>
                            <option value="Diamer">Diamer</option>
                        </select>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Focus Area</label>
                        <select class="form-select" @bind="selectedFocusArea">
                            <option value="">All Areas</option>
                            <option value="Disaster Management">Disaster Management</option>
                            <option value="Healthcare">Healthcare</option>
                            <option value="Education">Education</option>
                            <option value="Water & Sanitation">Water & Sanitation</option>
                            <option value="Agriculture">Agriculture</option>
                            <option value="Women Empowerment">Women Empowerment</option>
                            <option value="Climate Change">Climate Change</option>
                            <option value="Infrastructure">Infrastructure</option>
                        </select>
                    </div>
                    
                    <button class="btn btn-success w-100" @onclick="ApplyFilters">
                        <i class="bi bi-funnel-fill"></i> Apply Filters
                    </button>
                    
                    <hr />
                    
                    <div class="ngo-stats">
                        <h6 class="text-muted mb-3">Summary</h6>
                        
                        <div class="stats-box total mb-3">
                            <div class="stats-label">Total NGOs</div>
                            <div class="stats-value">@filteredNgos.Count</div>
                        </div>
                        
                        <div class="stats-grid">
                            <div class="stats-item">
                                <div class="stats-label">International</div>
                                <div class="stats-value small">@filteredNgos.Count(n => n.Type == "International")</div>
                            </div>
                            <div class="stats-item">
                                <div class="stats-label">National</div>
                                <div class="stats-value small">@filteredNgos.Count(n => n.Type == "National")</div>
                            </div>
                            <div class="stats-item">
                                <div class="stats-label">Local</div>
                                <div class="stats-value small">@filteredNgos.Count(n => n.Type == "Local")</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Map and NGO List -->
        <div class="col-md-9">
            <!-- NGO Map -->
            <div class="card mb-4">
                <div class="card-header bg-success text-white">
                    <h5 class="mb-0">NGO Distribution Map</h5>
                </div>
                <div class="card-body p-0">
                    <div id="ngoMap" class="ngo-map"></div>
                </div>
                <div class="card-footer d-flex gap-2">
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" type="checkbox" id="showInternational" 
                               checked="@showInternationalLayer" 
                               @onchange="HandleInternationalToggle">
                        <label class="form-check-label" for="showInternational">
                            <span class="badge bg-danger">International</span>
                        </label>
                    </div>
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" type="checkbox" id="showNational" 
                               checked="@showNationalLayer" 
                               @onchange="HandleNationalToggle">
                        <label class="form-check-label" for="showNational">
                            <span class="badge bg-warning text-dark">National</span>
                        </label>
                    </div>
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" type="checkbox" id="showLocal" 
                               checked="@showLocalLayer" 
                               @onchange="HandleLocalToggle">
                        <label class="form-check-label" for="showLocal">
                            <span class="badge bg-success">Local</span>
                        </label>
                    </div>
                </div>
            </div>
            
            <!-- NGO Listing -->
            <div class="card">
                <div class="card-header bg-success text-white d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">NGO Registry</h5>
                    <button class="btn btn-sm btn-light" @onclick="ToggleAddNgoForm">
                        <i class="bi bi-plus-circle"></i> Add NGO
                    </button>
                </div>
                
                @if (showAddNgoForm)
                {
                    <div class="card-body">
                        <h6 class="mb-3">Add New NGO</h6>
                        <form>
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">NGO Name</label>
                                        <input type="text" class="form-control" @bind="newNgo.Name" required>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">NGO Type</label>
                                        <select class="form-select" @bind="newNgo.Type" required>
                                            <option value="">Select Type</option>
                                            <option value="International">International</option>
                                            <option value="National">National</option>
                                            <option value="Local">Local</option>
                                        </select>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">Primary District</label>
                                        <select class="form-select" @bind="newNgo.District" required>
                                            <option value="">Select District</option>
                                            <option value="Gilgit">Gilgit</option>
                                            <option value="Skardu">Skardu</option>
                                            <option value="Hunza">Hunza</option>
                                            <option value="Astore">Astore</option>
                                            <option value="Ghanche">Ghanche</option>
                                            <option value="Ghizer">Ghizer</option>
                                            <option value="Nagar">Nagar</option>
                                            <option value="Shigar">Shigar</option>
                                            <option value="Diamer">Diamer</option>
                                        </select>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">Primary Focus Area</label>
                                        <select class="form-select" @bind="newNgo.PrimaryFocusArea" required>
                                            <option value="">Select Focus Area</option>
                                            <option value="Disaster Management">Disaster Management</option>
                                            <option value="Healthcare">Healthcare</option>
                                            <option value="Education">Education</option>
                                            <option value="Water & Sanitation">Water & Sanitation</option>
                                            <option value="Agriculture">Agriculture</option>
                                            <option value="Women Empowerment">Women Empowerment</option>
                                            <option value="Climate Change">Climate Change</option>
                                            <option value="Infrastructure">Infrastructure</option>
                                        </select>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">Contact Phone</label>
                                        <input type="tel" class="form-control" @bind="newNgo.ContactPhone">
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">Email</label>
                                        <input type="email" class="form-control" @bind="newNgo.Email">
                                    </div>
                                </div>
                            </div>
                            
                            <div class="mb-3">
                                <label class="form-label">Description</label>
                                <textarea class="form-control" rows="3" @bind="newNgo.Description"></textarea>
                            </div>
                            
                            <div class="d-flex justify-content-end">
                                <button type="button" class="btn btn-secondary me-2" @onclick="ResetForm">Cancel</button>
                                <button type="button" class="btn btn-success" @onclick="AddNgo">Save NGO</button>
                            </div>
                        </form>
                    </div>
                }
                
                <div class="card-body @(showAddNgoForm ? "border-top" : "")">
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Type</th>
                                    <th>District</th>
                                    <th>Primary Focus</th>
                                    <th>Contact</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (filteredNgos.Count == 0)
                                {
                                    <tr>
                                        <td colspan="6" class="text-center py-3">No NGOs found matching your criteria.</td>
                                    </tr>
                                }
                                else
                                {
                                    @foreach (var ngo in filteredNgos)
                                    {
                                        <tr>
                                            <td>@ngo.Name</td>
                                            <td>
                                                <span class="badge @GetNgoTypeBadgeClass(ngo.Type)">@ngo.Type</span>
                                            </td>
                                            <td>@ngo.District</td>
                                            <td>@ngo.PrimaryFocusArea</td>
                                            <td>@ngo.ContactPhone</td>
                                            <td>
                                                <button class="btn btn-sm btn-success me-1" @onclick="() => ViewNgoDetails(ngo)">
                                                    <i class="bi bi-eye"></i>
                                                </button>
                                                <button class="btn btn-sm btn-danger" @onclick="() => DeleteNgo(ngo)">
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@if (selectedNgo != null)
{
    <div class="modal fade show" style="display: block; z-index: 1050;" tabindex="-1" @onclick="@((e) => HandleModalBackdropClick(e))">
        <div class="modal-dialog modal-lg" @onclick:stopPropagation="true">
            <div class="modal-content">
                <div class="modal-header bg-success text-white">
                    <h5 class="modal-title">NGO Details</h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CloseNgoDetailsModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-8">
                            <h4>@(selectedNgo.Name ?? "Unknown NGO")</h4>
                            <span class="badge @GetNgoTypeBadgeClass(selectedNgo.Type ?? "") mb-2">@(selectedNgo.Type ?? "Unknown")</span>

                            <p class="mb-3">@(selectedNgo.Description ?? "No description available.")</p>

                            <h6 class="text-muted">Focus Areas</h6>
                            <div class="mb-3">
                                <span class="badge bg-success me-1">@(selectedNgo.PrimaryFocusArea ?? "Not specified")</span>
                                @if (selectedNgo.SecondaryFocusAreas != null && selectedNgo.SecondaryFocusAreas.Any())
                                {
                                    @foreach (var area in selectedNgo.SecondaryFocusAreas)
                                    {
                                        <span class="badge bg-success-subtle text-success me-1">@area</span>
                                    }
                                }
                            </div>

                            <h6 class="text-muted">Location</h6>
                            <p>@(selectedNgo.Location ?? "Location not specified"), @(selectedNgo.District ?? "District not specified")</p>
                        </div>
                        <div class="col-md-4">
                            <div class="contact-info-card">
                                <h6 class="text-muted">Contact Information</h6>
                                <ul class="list-unstyled">
                                    @if (!string.IsNullOrWhiteSpace(selectedNgo.ContactPhone))
                                    {
                                        <li class="mb-2">
                                            <i class="bi bi-telephone me-2"></i>
                                            <a href="tel:@selectedNgo.ContactPhone">@selectedNgo.ContactPhone</a>
                                        </li>
                                    }
                                    @if (!string.IsNullOrWhiteSpace(selectedNgo.Email))
                                    {
                                        <li class="mb-2">
                                            <i class="bi bi-envelope me-2"></i>
                                            <a href="mailto:@selectedNgo.Email">@selectedNgo.Email</a>
                                        </li>
                                    }
                                    @if (!string.IsNullOrWhiteSpace(selectedNgo.Website))
                                    {
                                        <li class="mb-2">
                                            <i class="bi bi-globe me-2"></i>
                                            <a href="@selectedNgo.Website" target="_blank">Visit Website</a>
                                        </li>
                                    }
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseNgoDetailsModal">Close</button>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show" style="z-index: 1040;"></div>
    </div>
}

@code {
    // Filter parameters
    private string selectedNgoType = "";
    private string selectedDistrict = "";
    private string selectedFocusArea = "";
    
    // Data lists
    private List<NgoEntity> ngoList = new();
    private List<NgoEntity> filteredNgos = new();
    
    // Form properties
    private bool showAddNgoForm = false;
    private NgoEntity newNgo = new();
    
    // Modal properties
    private NgoEntity? selectedNgo;
    
    // Layer visibility
    private bool showInternationalLayer = true;
    private bool showNationalLayer = true;
    private bool showLocalLayer = true;
    
    // Constants
    private readonly string underscoreChar = "_";
    
    // Focus areas for form
    private List<string> focusAreas = new()
    {
        "Disaster Management",
        "Healthcare",
        "Education",
        "Water & Sanitation",
        "Agriculture",
        "Women Empowerment",
        "Climate Change",
        "Infrastructure"
    };
    
    protected override async Task OnInitializedAsync()
    {
        await LoadNgosFromDatabase();
        ApplyFilters();
    }
    
    private async Task LoadNgosFromDatabase()
    {
        try
        {
            var ngos = await _ngoRepository.GetAllAsync();
            
            if (ngos.Any())
            {
                ngoList = ngos.ToList();
            }
            else
            {
                // Load sample data if database is empty
                InitializeSampleData();
                
                // Save sample data to database
                foreach (var ngo in ngoList)
                {
                    await _ngoRepository.CreateAsync(ngo);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading NGOs: {ex.Message}");
            InitializeSampleData();
        }
    }
    

    
    private void InitializeSampleData()
    {
        ngoList = new List<NgoEntity>
        {
            new NgoEntity
            {
                Name = "Aga Khan Foundation",
                Type = "International",
                District = "Gilgit",
                Location = "Koenigs Allee, Gilgit City",
                PrimaryFocusArea = "Education",
                SecondaryFocusAreas = new List<string> { "Healthcare", "Agriculture" },
                ContactPhone = "+92-58-12345678",
                Email = "info@akf.org.pk",
                Website = "https://www.akdn.org",
                Description = "The Aga Khan Foundation is an international non-profit organization focused on education, healthcare and rural development in Gilgit-Baltistan region.",
                Latitude = 35.8877,
                Longitude = 74.4753
            },
            new NgoEntity
            {
                Name = "GB Rural Support Programme",
                Type = "National",
                District = "Gilgit",
                Location = "Main Jutial Road, Gilgit",
                PrimaryFocusArea = "Rural Development",
                SecondaryFocusAreas = new List<string> { "Water & Sanitation", "Agriculture" },
                ContactPhone = "+92-58-15551234",
                Email = "info@gbrsp.org.pk",
                Website = "https://www.gbrsp.org.pk",
                Description = "GB Rural Support Programme works to improve the quality of life in rural communities through sustainable development initiatives.",
                Latitude = 35.9017,
                Longitude = 74.4190
            },
            new NgoEntity
            {
                Name = "World Food Programme - GB",
                Type = "International",
                District = "Skardu",
                Location = "Satellite Town, Skardu",
                PrimaryFocusArea = "Food Security",
                SecondaryFocusAreas = new List<string> { "Disaster Management", "Nutrition" },
                ContactPhone = "+92-58-87654321",
                Email = "wfp.skardu@wfp.org",
                Website = "https://www.wfp.org",
                Description = "WFP focuses on providing food assistance during emergencies and working with communities to improve nutrition and build resilience.",
                Latitude = 35.3033,
                Longitude = 75.6180
            }
        };
    }
    
    private async Task InitializeMap()
    {
        try
        {
            // Make sure to let the UI render completely before initializing the map
            await Task.Delay(100);
            
            // Initialize the map
            await JS.InvokeVoidAsync("initNgoMap", 35.8884, 74.4584);
            
            // Add markers for each NGO
            foreach (var ngo in ngoList)
            {
                await JS.InvokeVoidAsync("addNgoMarker", ngo.Id, ngo.Name, ngo.Type, ngo.District, 
                    ngo.PrimaryFocusArea, ngo.Latitude, ngo.Longitude);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing map: {ex.Message}");
            await JS.InvokeVoidAsync("alert", $"Error initializing map: {ex.Message}");
        }
    }
    
    private void ApplyFilters()
    {
        filteredNgos = ngoList.Where(n =>
            (string.IsNullOrEmpty(selectedNgoType) || n.Type == selectedNgoType) &&
            (string.IsNullOrEmpty(selectedDistrict) || n.District == selectedDistrict) &&
            (string.IsNullOrEmpty(selectedFocusArea) ||
             n.PrimaryFocusArea == selectedFocusArea ||
             (n.SecondaryFocusAreas != null && n.SecondaryFocusAreas.Contains(selectedFocusArea)))
        ).ToList();
    }
    
    private async Task HandleInternationalToggle(ChangeEventArgs e)
    {
        bool isVisible = (bool)e.Value!;
        showInternationalLayer = isVisible;
        await JS.InvokeVoidAsync("toggleNgoLayerVisibility", "International", isVisible);
    }
    
    private async Task HandleNationalToggle(ChangeEventArgs e)
    {
        bool isVisible = (bool)e.Value!;
        showNationalLayer = isVisible;
        await JS.InvokeVoidAsync("toggleNgoLayerVisibility", "National", isVisible);
    }
    
    private async Task HandleLocalToggle(ChangeEventArgs e)
    {
        bool isVisible = (bool)e.Value!;
        showLocalLayer = isVisible;
        await JS.InvokeVoidAsync("toggleNgoLayerVisibility", "Local", isVisible);
    }
    
    private void ToggleAddNgoForm()
    {
        showAddNgoForm = !showAddNgoForm;
        if (showAddNgoForm)
        {
            ResetForm();
        }
    }
    
    private void ResetForm()
    {
        newNgo = new NgoEntity();
    }
    
    private async Task AddNgo()
    {
        if (string.IsNullOrWhiteSpace(newNgo.Name) || 
            string.IsNullOrWhiteSpace(newNgo.Type) ||
            string.IsNullOrWhiteSpace(newNgo.District) ||
            string.IsNullOrWhiteSpace(newNgo.PrimaryFocusArea))
        {
            // Show validation error
            await JS.InvokeVoidAsync("alert", "Please fill in all required fields.");
            return;
        }
        
        // Set default coordinates based on district
        SetDefaultCoordinates(newNgo);
        
        try
        {
            // Add to database
            var createdNgo = await _ngoRepository.CreateAsync(newNgo);
            
            // Add to local list
            ngoList.Add(createdNgo);
            
            // Update map
            await JS.InvokeVoidAsync("addNgoMarker", createdNgo.Id, createdNgo.Name, createdNgo.Type, createdNgo.District, 
                createdNgo.PrimaryFocusArea, createdNgo.Latitude, createdNgo.Longitude);
            
            // Apply filters to update view
            ApplyFilters();
            
            // Reset form
            showAddNgoForm = false;
            ResetForm();
            
            await JS.InvokeVoidAsync("alert", "NGO added successfully!");
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error adding NGO: {ex.Message}");
        }
    }
    
    private void SetDefaultCoordinates(NgoEntity ngo)
    {
        // Default coordinates by district
        var coordinates = ngo.District switch
        {
            "Gilgit" => (35.8884, 74.4584),
            "Skardu" => (35.3033, 75.6180),
            "Hunza" => (36.3152, 74.6460),
            "Astore" => (35.3653, 74.8560),
            "Ghanche" => (35.2939, 76.7298),
            "Ghizer" => (36.1770, 73.7568),
            "Nagar" => (36.2579, 74.0799),
            "Shigar" => (35.4765, 75.5420),
            "Diamer" => (35.2106, 73.7727),
            _ => (35.8884, 74.4584), // Default to Gilgit
        };
        
        // Add slight randomization for multiple NGOs in same district
        var random = new Random();
        double offsetLat = (random.NextDouble() - 0.5) * 0.02;
        double offsetLng = (random.NextDouble() - 0.5) * 0.02;
        
        ngo.Latitude = coordinates.Item1 + offsetLat;
        ngo.Longitude = coordinates.Item2 + offsetLng;
    }
    
    private void ViewNgoDetails(NgoEntity ngo)
    {
        if (ngo != null)
        {
            selectedNgo = ngo;
            // Ensure SecondaryFocusAreas is initialized
            if (selectedNgo.SecondaryFocusAreas == null)
            {
                selectedNgo.SecondaryFocusAreas = new List<string>();
            }
        }
    }
    
    private void CloseNgoDetailsModal()
    {
        selectedNgo = null;
        StateHasChanged();
    }

    private void HandleModalBackdropClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs e)
    {
        // Close modal when clicking on backdrop (outside the modal dialog)
        CloseNgoDetailsModal();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitializeMap();

            // Add keyboard event listener for Escape key
            await JS.InvokeVoidAsync("addEscapeKeyListener", DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public void HandleEscapeKey()
    {
        if (selectedNgo != null)
        {
            CloseNgoDetailsModal();
        }
    }
    
    private async Task DeleteNgo(NgoEntity ngo)
    {
        try
        {
            // Delete from database
            var result = await _ngoRepository.DeleteAsync(ngo.Id);
            
            if (result)
            {
                // Remove from local lists
                ngoList.Remove(ngo);
                filteredNgos.Remove(ngo);
                
                // Remove marker from map
                await JS.InvokeVoidAsync("removeNgoMarker", ngo.Id);
                
                ApplyFilters();
                
                await JS.InvokeVoidAsync("alert", "NGO deleted successfully!");
            }
            else
            {
                await JS.InvokeVoidAsync("alert", "Failed to delete NGO.");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error deleting NGO: {ex.Message}");
        }
    }
    
    private string GetNgoTypeBadgeClass(string type)
    {
        return type switch
        {
            "International" => "bg-success-subtle text-success",
            "National" => "bg-success",
            "Local" => "bg-success-light text-success",
            _ => "bg-secondary"
        };
    }
}
