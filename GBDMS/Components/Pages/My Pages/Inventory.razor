@page "/inventory"
@using GBDMS.Data
@inject IJSRuntime JS
@inject IInventoryRepository _inventoryRepository

<div class="container inventory-container">
    <h2 class="text-center mb-4 text-success">Relief Supplies Inventory</h2>

    <div class="row mb-4">
        <div class="col-12 d-flex justify-content-center">
            <div class="btn-group">
                <button class="btn @(activeTab == "overview" ? "btn-success" : "btn-outline-success")" @onclick="@(() => SetActiveTab("overview"))">
                    Overview
                </button>
                <button class="btn @(activeTab == "inventory" ? "btn-success" : "btn-outline-success")" @onclick="@(() => SetActiveTab("inventory"))">
                    Inventory
                </button>
            </div>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(statusMessage))
    {
        <div class="alert alert-@statusType alert-dismissible fade show" role="alert">
            @statusMessage
            <button type="button" class="btn-close" @onclick="ClearStatus"></button>
        </div>
    }

    @if (activeTab == "overview")
    {
        <div class="row">
            <div class="col-md-8">
                <div class="card inventory-card">
                    <div class="card-header bg-success text-white">
                        <h5 class="mb-0">Inventory Summary</h5>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>Category</th>
                                        <th>Available</th>
                                        <th>Status</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var category in inventoryCategories)
                                    {
                                        var available = GetTotalAvailableByCategory(category);
                                        var status = GetCategoryStatus(available);
                                        <tr>
                                            <td>@category</td>
                                            <td>@available units</td>
                                            <td><span class="badge bg-@status.Color">@status.Text</span></td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <div class="card inventory-card">
                    <div class="card-header bg-success text-white">
                        <h5 class="mb-0">Quick Stats</h5>
                    </div>
                    <div class="card-body">
                        <div class="inventory-summary">
                            <div class="summary-icon bg-success">
                                <i class="bi bi-box-seam"></i>
                            </div>
                            <div>
                                <div>Total Items</div>
                                <div class="summary-value">@inventoryItems.Count</div>
                            </div>
                        </div>
                        <div class="inventory-summary">
                            <div class="summary-icon bg-warning">
                                <i class="bi bi-exclamation-triangle"></i>
                            </div>
                            <div>
                                <div>Low Stock Items</div>
                                <div class="summary-value">@inventoryItems.Count(i => i.Quantity < i.MinimumLevel && i.Quantity > 0)</div>
                            </div>
                        </div>
                        <div class="inventory-summary">
                            <div class="summary-icon bg-danger">
                                <i class="bi bi-x-circle"></i>
                            </div>
                            <div>
                                <div>Out of Stock</div>
                                <div class="summary-value">@inventoryItems.Count(i => i.Quantity == 0)</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (activeTab == "inventory")
    {
        <div class="card inventory-card">
            <div class="card-header bg-success text-white d-flex justify-content-between align-items-center">
                <h5 class="mb-0">Inventory Items</h5>
                <button class="btn btn-light btn-sm" @onclick="ShowNewItemModal">
                    <i class="bi bi-plus-circle me-1"></i> Add Item
                </button>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <div class="input-group">
                        <input type="text" class="form-control" placeholder="Search items..." @bind="inventorySearchTerm" @bind:event="oninput" />
                        <select class="form-select" @bind="inventoryCategoryFilter">
                            <option value="">All Categories</option>
                            @foreach (var category in inventoryCategories)
                            {
                                <option value="@category">@category</option>
                            }
                        </select>
                        <button class="btn btn-light" @onclick="ClearInventoryFilters">
                            <i class="bi bi-x-circle"></i>
                        </button>
                    </div>
                </div>

                <div class="table-responsive">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Category</th>
                                <th>Quantity</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in FilteredInventoryItems)
                            {
                                var status = GetItemStatus(item);
                                <tr>
                                    <td>@item.Name</td>
                                    <td>@item.Category</td>
                                    <td>@item.Quantity @item.Unit</td>
                                    <td><span class="badge bg-@status.Color">@status.Text</span></td>
                                    <td>
                                        <button class="btn btn-sm btn-outline-success" @onclick="() => UpdateItemStock(item)">
                                            <i class="bi bi-arrow-up"></i> Add Stock
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }

    <!-- New Item Modal -->
    @if (showNewItemModal)
    {
        <div class="modal show d-block" tabindex="-1" role="dialog">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header bg-success text-white">
                        <h5 class="modal-title">Add New Item</h5>
                        <button type="button" class="btn-close" @onclick="() => showNewItemModal = false"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <label class="form-label">Item Name</label>
                            <input type="text" class="form-control" @bind="newItem.Name" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Category</label>
                            <select class="form-select" @bind="newItem.Category">
                                @foreach (var category in inventoryCategories)
                                {
                                    <option value="@category">@category</option>
                                }
                            </select>
                        </div>
                        <div class="row mb-3">
                            <div class="col-6">
                                <label class="form-label">Quantity</label>
                                <input type="number" class="form-control" @bind="newItem.Quantity" min="0" />
                            </div>
                            <div class="col-6">
                                <label class="form-label">Unit</label>
                                <input type="text" class="form-control" @bind="newItem.Unit" />
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Minimum Level</label>
                            <input type="number" class="form-control" @bind="newItem.MinimumLevel" min="0" />
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="() => showNewItemModal = false">Cancel</button>
                        <button type="button" class="btn btn-success" @onclick="AddInventoryItem">Save</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }
</div>

@code {
    private string activeTab = "overview";
    private string statusMessage = "";
    private string statusType = "success";
    private string inventorySearchTerm = "";
    private string inventoryCategoryFilter = "";
    private bool showNewItemModal = false;
    
    // Data models - initialize with empty collections to avoid null reference exceptions
    private List<InventoryItem> inventoryItems = new List<InventoryItem>();
    private readonly List<string> inventoryCategories = new List<string> {
        "Food", "Water", "Shelter", "Clothing", "Medicine", "Hygiene", "Tools", "Other"
    };
    private InventoryItem newItem = new InventoryItem { 
        LastUpdated = DateTime.Now 
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadInventoryData();
    }

    private async Task LoadInventoryData()
    {
        try
        {
            var items = await _inventoryRepository.GetAllAsync();
            
            // If no items in the database, load sample data
            if (!items.Any())
            {
                await LoadSampleData();
            }
            else
            {
                inventoryItems = items.ToList();
            }
        }
        catch (Exception ex)
        {
            ShowMessage($"Error loading inventory: {ex.Message}", "danger");
        }
    }

    private async Task LoadSampleData()
    {
        var sampleItems = new List<InventoryItem>
        {
            new InventoryItem
            {
                ItemCode = "F001", Name = "Rice (5kg bag)", Category = "Food", 
                Quantity = 250, Unit = "bags", MinimumLevel = 100, 
                LastUpdated = DateTime.Now.AddDays(-5)
            },
            new InventoryItem
            {
                ItemCode = "F002", Name = "Flour (10kg bag)", Category = "Food", 
                Quantity = 180, Unit = "bags", MinimumLevel = 80, 
                LastUpdated = DateTime.Now.AddDays(-3)
            },
            new InventoryItem
            {
                ItemCode = "W001", Name = "Drinking Water (1.5L)", Category = "Water", 
                Quantity = 1500, Unit = "bottles", MinimumLevel = 500, 
                LastUpdated = DateTime.Now.AddDays(-2)
            },
            new InventoryItem
            {
                ItemCode = "S001", Name = "Tents (4-person)", Category = "Shelter", 
                Quantity = 80, Unit = "tents", MinimumLevel = 50, 
                LastUpdated = DateTime.Now.AddDays(-15)
            },
            new InventoryItem
            {
                ItemCode = "M001", Name = "First Aid Kits", Category = "Medicine", 
                Quantity = 95, Unit = "kits", MinimumLevel = 50, 
                LastUpdated = DateTime.Now.AddDays(-8)
            },
            new InventoryItem
            {
                ItemCode = "F003", Name = "Ready-to-eat Meals", Category = "Food", 
                Quantity = 0, Unit = "packs", MinimumLevel = 200, 
                LastUpdated = DateTime.Now.AddDays(-1)
            }
        };

        foreach (var item in sampleItems)
        {
            await _inventoryRepository.CreateAsync(item);
        }

        inventoryItems = (await _inventoryRepository.GetAllAsync()).ToList();
    }

    private IEnumerable<InventoryItem> FilteredInventoryItems => inventoryItems
        .Where(i => string.IsNullOrEmpty(inventorySearchTerm) || 
            i.Name.Contains(inventorySearchTerm, StringComparison.OrdinalIgnoreCase) || 
            i.ItemCode.Contains(inventorySearchTerm, StringComparison.OrdinalIgnoreCase))
        .Where(i => string.IsNullOrEmpty(inventoryCategoryFilter) || i.Category == inventoryCategoryFilter)
        .OrderBy(i => i.Category)
        .ThenBy(i => i.Name);

    private void SetActiveTab(string tab)
    {
        activeTab = tab;
    }

    private void ClearStatus()
    {
        statusMessage = "";
    }

    private void ShowMessage(string message, string type = "success")
    {
        statusMessage = message;
        statusType = type;
    }

    private void ClearInventoryFilters()
    {
        inventorySearchTerm = "";
        inventoryCategoryFilter = "";
    }

    private void ShowNewItemModal()
    {
        newItem = new InventoryItem
        {
            Category = inventoryCategories[0],
            LastUpdated = DateTime.Now
        };
        showNewItemModal = true;
    }

    private async Task AddInventoryItem()
    {
        if (string.IsNullOrWhiteSpace(newItem.Name))
        {
            ShowMessage("Item name is required", "danger");
            return;
        }

        try {
            // Generate item code based on category
            var categoryPrefix = newItem.Category.Substring(0, 1);
            var itemsInCategory = inventoryItems.Count(i => i.Category == newItem.Category);
            newItem.ItemCode = $"{categoryPrefix}{(itemsInCategory + 1):D03}";
            newItem.LastUpdated = DateTime.Now;
            
            await _inventoryRepository.CreateAsync(newItem);
            
            // Refresh inventory items
            inventoryItems = (await _inventoryRepository.GetAllAsync()).ToList();
            
            ShowMessage($"Added new item: {newItem.Name}");
            showNewItemModal = false;
        }
        catch (Exception ex) {
            ShowMessage($"Error adding inventory item: {ex.Message}", "danger");
        }
    }

    private async Task UpdateItemStock(InventoryItem item)
    {
        try {
            // Simple implementation just adding 10 to the stock
            item.Quantity += 10;
            item.LastUpdated = DateTime.Now;
            
            await _inventoryRepository.UpdateAsync(item);
            
            ShowMessage($"Updated stock for {item.Name}");
        }
        catch (Exception ex) {
            ShowMessage($"Error updating inventory: {ex.Message}", "danger");
        }
    }

    // Helper methods
    private int GetTotalAvailableByCategory(string category)
    {
        return inventoryItems.Where(i => i.Category == category).Sum(i => i.Quantity);
    }

    private (string Color, string Text) GetCategoryStatus(int available)
    {
        if (available == 0) return ("danger", "Out of Stock");
        if (available < 50) return ("warning", "Low Stock");
        if (available < 100) return ("info", "Moderate");
        return ("success", "Sufficient");
    }

    private (string Color, string Text) GetItemStatus(InventoryItem item)
    {
        if (item.Quantity == 0) return ("danger", "Out of Stock");
        if (item.Quantity < item.MinimumLevel) return ("warning", "Low Stock");
        return ("success", "Sufficient");
    }
}