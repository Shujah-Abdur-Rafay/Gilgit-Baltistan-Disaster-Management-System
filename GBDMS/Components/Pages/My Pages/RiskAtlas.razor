@page "/riskatlas"

@inject IJSRuntime JS


<h3>Advanced Spatial Analysis with Turf.js</h3>

<p><strong>Distance:</strong> @distance km</p>
<p><strong>Buffered Area GeoJSON:</strong> @bufferedGeoJSON</p>
<p><strong>Cluster Count:</strong> @clusterCount</p>

<button @onclick="CalculateDistance">Calculate Distance</button>
<button @onclick="BufferRegion">Buffer Area</button>
<button @onclick="ClusterPoints">Cluster Points</button>

<div id="map" style="width: 100%; height: 500px;"></div>

@code {
    private double distance;
    private string bufferedGeoJSON = "";
    private int clusterCount;

    private async Task CalculateDistance()
    {
        var point1 = new double[] { 74.3481, 35.3212 }; // Gilgit (Longitude, Latitude)
        var point2 = new double[] { 75.6372, 35.8896 }; // Skardu (Longitude, Latitude)

        distance = await JS.InvokeAsync<double>("turfInterop.calculateDistance", point1, point2);
    }

    private async Task BufferRegion()
    {
        var point = new double[] { 74.3481, 35.3212 }; // Gilgit
        bufferedGeoJSON = await JS.InvokeAsync<string>("turfInterop.bufferRegion", point, 10, "kilometers");
    }

    private async Task ClusterPoints()
    {
        var points = new double[][]
        {
            new double[] { 74.3481, 35.3212 }, // Gilgit
            new double[] { 75.6372, 35.8896 }, // Skardu
            new double[] { 73.0551, 36.0082 }, // Hunza
            new double[] { 76.3545, 35.4282 }  // Astore
        };

        clusterCount = await JS.InvokeAsync<int>("turfInterop.clusterPoints", points, 50);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("turfInterop.initializeMap", "map");

        }
    }
}