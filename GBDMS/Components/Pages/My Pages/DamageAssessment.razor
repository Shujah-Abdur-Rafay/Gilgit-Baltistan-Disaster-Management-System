@page "/damage"
@inject IJSRuntime JS
@inject IUserRepository _userRepository
@inject IInventoryRepository _inventoryRepository

<div class="container">
    <h2 class="text-center mb-4 text-success">Rapid Damage Assessment</h2>

    <div class="row">
        <!-- Basic Location Selection -->
        <div class="col-md-4 mb-4">
            <div class="card simple-card">
                <div class="card-header">
                    <h5 class="mb-0">Location</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label class="form-label">Select District</label>
                        <select class="form-select" @bind="selectedDistrict" @bind:after="LoadDistrictData">
                            <option value="Gilgit">Gilgit</option>
                            <option value="Skardu">Skardu</option>
                            <option value="Hunza">Hunza</option>
                            <option value="Astore">Astore</option>
                            <option value="Ghanche">Ghanche</option>
                            <option value="Ghizer">Ghizer</option>
                            <option value="Nagar">Nagar</option>
                            <option value="Shigar">Shigar</option>
                        </select>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Incident Type</label>
                        <select class="form-select" @bind="selectedIncidentType">
                            <option value="Earthquake">Earthquake</option>
                            <option value="Flood">Flood</option>
                            <option value="Landslide">Landslide</option>
                            <option value="Avalanche">Avalanche</option>
                            <option value="GLOF">Glacial Lake Outburst Flood</option>
                            <option value="Other">Other</option>
                        </select>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Incident Date</label>
                        <input type="date" class="form-control" @bind="incidentDate" />
                    </div>
                </div>
            </div>
        </div>

        <!-- Simplified Damage Assessment -->
        <div class="col-md-8">
            <div class="card simple-card">
                <div class="card-header">
                    <h5 class="mb-0">Damage Summary</h5>
                </div>
                <div class="card-body">
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="form-label">Structures Affected</label>
                            <input type="number" class="form-control" @bind="structuresAffected" />
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Infrastructure Damage</label>
                            <input type="number" class="form-control" @bind="infrastructureDamage" />
                        </div>
                    </div>
                    
                    <div class="row mb-3">
                        <div class="col-md-4">
                            <label class="form-label">Fatalities</label>
                            <input type="number" class="form-control" @bind="fatalities" />
                        </div>
                        <div class="col-md-4">
                            <label class="form-label">Injuries</label>
                            <input type="number" class="form-control" @bind="injuries" />
                        </div>
                        <div class="col-md-4">
                            <label class="form-label">Displaced</label>
                            <input type="number" class="form-control" @bind="displaced" />
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Notes</label>
                        <textarea class="form-control" rows="3" @bind="notes"></textarea>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Severity Level</label>
                        <select class="form-select" @bind="severityLevel">
                            <option value="Low">Low</option>
                            <option value="Moderate">Moderate</option>
                            <option value="High">High</option>
                            <option value="Severe">Severe</option>
                            <option value="Catastrophic">Catastrophic</option>
                        </select>
                    </div>
                    
                    <div class="alert @GetSeverityAlertClass(severityLevel)">
                        <strong>Overall Severity:</strong> @severityLevel
                    </div>
                    
                    <button class="btn btn-success w-100 mb-3" @onclick="SaveAssessment">Save Assessment</button>
                    
                    @if(statusMessage != "")
                    {
                        <div class="alert alert-@statusType mt-3">
                            @statusMessage
                        </div>
                    }
                </div>
            </div>
            
            <!-- Saved Assessments -->
            @if(savedAssessments.Count > 0)
            {
                <div class="card simple-card mt-4">
                    <div class="card-header">
                        <h5 class="mb-0">Saved Assessments</h5>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>District</th>
                                        <th>Incident Type</th>
                                        <th>Date</th>
                                        <th>Severity</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach(var assessment in savedAssessments)
                                    {
                                        <tr>
                                            <td>@assessment.District</td>
                                            <td>@assessment.IncidentType</td>
                                            <td>@assessment.IncidentDate.ToString("yyyy-MM-dd")</td>
                                            <td><span class="badge bg-@GetSeverityBadgeClass(assessment.SeverityLevel)">@assessment.SeverityLevel</span></td>
                                            <td>
                                                <button class="btn btn-sm btn-outline-primary" @onclick="() => LoadAssessment(assessment)">
                                                    <i class="bi bi-folder-open"></i> Load
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    // Basic properties
    private string selectedDistrict = "Gilgit";
    private string selectedIncidentType = "Earthquake";
    private DateTime incidentDate = DateTime.Now;
    private string severityLevel = "Moderate";
    private string notes = "";
    
    // Simplified damage properties
    private int structuresAffected = 0;
    private int infrastructureDamage = 0;
    private int fatalities = 0;
    private int injuries = 0;
    private int displaced = 0;
    
    // Status properties
    private string statusMessage = "";
    private string statusType = "success";
    
    // Database related properties
    private List<DamageAssessmentRecord> savedAssessments = new List<DamageAssessmentRecord>();
    private int currentAssessmentId = 0;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadSavedAssessments();
    }
    
    private async Task LoadSavedAssessments()
    {
        try
        {
            // In a real implementation, you would retrieve damage assessments from the database here
            // This is a placeholder that creates sample data
            if (savedAssessments.Count == 0)
            {
                savedAssessments = new List<DamageAssessmentRecord>
                {
                    new DamageAssessmentRecord
                    {
                        Id = 1,
                        District = "Gilgit",
                        IncidentType = "Earthquake",
                        IncidentDate = DateTime.Now.AddDays(-5),
                        SeverityLevel = "High",
                        StructuresAffected = 45,
                        InfrastructureDamage = 28,
                        Fatalities = 12,
                        Injuries = 67,
                        Displaced = 150,
                        Notes = "Major damage to residential areas.",
                        CreatedById = 1,
                        CreatedDate = DateTime.Now.AddDays(-5)
                    },
                    new DamageAssessmentRecord
                    {
                        Id = 2,
                        District = "Skardu",
                        IncidentType = "Flood",
                        IncidentDate = DateTime.Now.AddDays(-10),
                        SeverityLevel = "Moderate",
                        StructuresAffected = 32,
                        InfrastructureDamage = 45,
                        Fatalities = 3,
                        Injuries = 15,
                        Displaced = 230,
                        Notes = "Flooding affected agricultural lands.",
                        CreatedById = 1,
                        CreatedDate = DateTime.Now.AddDays(-10)
                    }
                };
            }
        }
        catch (Exception ex)
        {
            ShowMessage($"Error loading saved assessments: {ex.Message}", "danger");
        }
    }
    
    private async Task LoadDistrictData()
    {
        // Simplified data loading
        var random = new Random();
        
        if (selectedIncidentType == "Earthquake")
        {
            structuresAffected = random.Next(10, 50);
            infrastructureDamage = random.Next(5, 30);
            fatalities = random.Next(5, 30);
            injuries = random.Next(20, 100);
            displaced = random.Next(50, 200);
        }
        else if (selectedIncidentType == "Flood")
        {
            structuresAffected = random.Next(50, 200);
            infrastructureDamage = random.Next(20, 80);
            fatalities = random.Next(1, 10);
            injuries = random.Next(10, 50);
            displaced = random.Next(100, 500);
        }
        else if (selectedIncidentType == "Landslide")
        {
            structuresAffected = random.Next(5, 20);
            infrastructureDamage = random.Next(1, 10);
            fatalities = random.Next(0, 15);
            injuries = random.Next(5, 25);
            displaced = random.Next(20, 100);
        }
    }
    
    private async Task SaveAssessment()
    {
        try
        {
            // Get the current user ID (in a real implementation)
            var users = await _userRepository.GetAllAsync();
            var currentUserId = users.FirstOrDefault()?.Id ?? 1;
            
            // Create a new assessment object
            var assessment = new DamageAssessmentRecord
            {
                Id = currentAssessmentId > 0 ? currentAssessmentId : savedAssessments.Count + 1,
                District = selectedDistrict,
                IncidentType = selectedIncidentType,
                IncidentDate = incidentDate,
                SeverityLevel = severityLevel,
                StructuresAffected = structuresAffected,
                InfrastructureDamage = infrastructureDamage,
                Fatalities = fatalities,
                Injuries = injuries,
                Displaced = displaced,
                Notes = notes,
                CreatedById = currentUserId,
                CreatedDate = DateTime.Now
            };
            
            // In a real implementation, you would save to the database here
            
            // For now, just update our local list
            if (currentAssessmentId > 0)
            {
                // Update existing assessment
                var index = savedAssessments.FindIndex(a => a.Id == currentAssessmentId);
                if (index >= 0)
                {
                    savedAssessments[index] = assessment;
                }
            }
            else
            {
                // Add new assessment
                savedAssessments.Add(assessment);
            }
            
            ShowMessage($"Damage Assessment for {selectedDistrict} saved successfully!");
            ClearForm();
        }
        catch (Exception ex)
        {
            ShowMessage($"Error saving assessment: {ex.Message}", "danger");
        }
    }
    
    private void LoadAssessment(DamageAssessmentRecord assessment)
    {
        currentAssessmentId = assessment.Id;
        selectedDistrict = assessment.District;
        selectedIncidentType = assessment.IncidentType;
        incidentDate = assessment.IncidentDate;
        severityLevel = assessment.SeverityLevel;
        structuresAffected = assessment.StructuresAffected;
        infrastructureDamage = assessment.InfrastructureDamage;
        fatalities = assessment.Fatalities;
        injuries = assessment.Injuries;
        displaced = assessment.Displaced;
        notes = assessment.Notes;
        
        ShowMessage($"Loaded assessment for {assessment.District}", "info");
    }
    
    private void ClearForm()
    {
        currentAssessmentId = 0;
        structuresAffected = 0;
        infrastructureDamage = 0;
        fatalities = 0;
        injuries = 0;
        displaced = 0;
        notes = "";
    }
    
    private void ShowMessage(string message, string type = "success")
    {
        statusMessage = message;
        statusType = type;
    }
    
    private string GetSeverityAlertClass(string severity)
    {
        return severity switch
        {
            "Low" => "alert-success",
            "Moderate" => "alert-warning",
            "High" => "alert-danger",
            "Severe" => "alert-danger",
            "Catastrophic" => "alert-dark",
            _ => "alert-secondary"
        };
    }
    
    private string GetSeverityBadgeClass(string severity)
    {
        return severity switch
        {
            "Low" => "success",
            "Moderate" => "warning",
            "High" => "danger",
            "Severe" => "danger",
            "Catastrophic" => "dark",
            _ => "secondary"
        };
    }
    
    // Data model to represent a damage assessment record
    private class DamageAssessmentRecord
    {
        public int Id { get; set; }
        public string District { get; set; } = "";
        public string IncidentType { get; set; } = "";
        public DateTime IncidentDate { get; set; }
        public string SeverityLevel { get; set; } = "";
        public int StructuresAffected { get; set; }
        public int InfrastructureDamage { get; set; }
        public int Fatalities { get; set; }
        public int Injuries { get; set; }
        public int Displaced { get; set; }
        public string Notes { get; set; } = "";
        public int CreatedById { get; set; }
        public DateTime CreatedDate { get; set; }
    }
}
