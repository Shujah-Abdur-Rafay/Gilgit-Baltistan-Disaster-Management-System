@inject GBDMS.Services.AuthenticationService AuthService
@inject GBDMS.Services.ToastService ToastService
@inject IJSRuntime JS
@inject NavigationManager Navigation
@implements IDisposable
@using GBDMS.Components.Pages

<head>
    <!-- Bootstrap Icons -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
    <!-- Bootstrap CSS -->
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
</head>

<div class="top-row navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="/">
            <i class="bi bi-shield-fill me-2"></i>GBDMS
        </a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="flex-column">
        <div class="nav-item">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <i class="nav-icon bi bi-house-door-fill"></i>
                <span class="nav-text">Home</span>
            </NavLink>
        </div>

        <div class="nav-item">
            <NavLink class="nav-link" href="test">
                <i class="nav-icon bi bi-building"></i>
                <span class="nav-text">Facilities</span>
            </NavLink>
        </div>

        <div class="nav-item">
            <NavLink class="nav-link" href="videos">
                <i class="nav-icon bi bi-play-btn"></i>
                <span class="nav-text">Survival Guidelines</span>
            </NavLink>
        </div>

        @if (AuthService.IsPrivileged)
        {
            <div class="nav-item">
                <NavLink class="nav-link" href="model">
                    <i class="nav-icon bi bi-graph-up"></i>
                    <span class="nav-text">Model</span>
                </NavLink>
            </div>
        }

        <div class="nav-item">
            <NavLink class="nav-link" href="about">
                <i class="nav-icon bi bi-info-circle"></i>
                <span class="nav-text">About</span>
            </NavLink>
        </div>

        <div class="nav-item">
            <NavLink class="nav-link" href="contact">
                <i class="nav-icon bi bi-envelope"></i>
                <span class="nav-text">Contact Us</span>
            </NavLink>
        </div>

        @if (AuthService.IsSuperAdmin)
        {
            <div class="nav-item">
                <NavLink class="nav-link" href="admin">
                    <i class="nav-icon bi bi-shield-lock"></i>
                    <span class="nav-text">Admin</span>
                </NavLink>
            </div>
        }

        <div class="nav-item">
            @if (AuthService.IsLoggedIn)
            {
                <a class="nav-link" href="#" @onclick="HandleLogout" @onclick:preventDefault="true">
                    <i class="nav-icon bi bi-box-arrow-right"></i>
                    <span class="nav-text">Logout</span>
                </a>
            }
            else
            {
                <a class="nav-link" href="#" @onclick="HandleLogin" @onclick:preventDefault="true">
                    <i class="nav-icon bi bi-box-arrow-in-right"></i>
                    <span class="nav-text">Login</span>
                </a>
            }
        </div>
    </nav>
</div>

<LoginModal IsVisible="@showLoginModal"
           IsVisibleChanged="@((bool visible) => showLoginModal = visible)"
           OnLoginSuccess="@OnLoginSuccess" />

@code {
    private bool showLoginModal = false;
    protected override void OnInitialized()
    {
        AuthService.OnAuthenticationStateChanged += StateHasChanged;
    }

    public void Dispose()
    {
        AuthService.OnAuthenticationStateChanged -= StateHasChanged;
    }

    private async Task HandleLogin()
    {
        showLoginModal = true;
        StateHasChanged();
    }

    private async Task HandleLogout()
    {
        await AuthService.LogoutAsync();
        await ToastService.ShowSuccess("You have been logged out successfully.");
        Navigation.NavigateTo("/", true); // Navigate to home page and force reload
    }

    private async Task OnLoginSuccess()
    {
        string welcomeMessage = AuthService.IsSuperAdmin ?
            "Welcome Super Admin! You have full system access." :
            "Welcome! You now have privileged access to all features.";
        await ToastService.ShowSuccess(welcomeMessage);
        StateHasChanged();
    }
}
